<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Picker弹窗位于表单之下问题查找记录]]></title>
    <url>%2F2020%2F08%2F17%2FPicker%E5%BC%B9%E7%AA%97%E4%BD%8D%E4%BA%8E%E8%A1%A8%E5%8D%95%E4%B9%8B%E4%B8%8B%E9%97%AE%E9%A2%98%E6%9F%A5%E6%89%BE%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[背景今天遇到一个问题，picker列表第一次弹出的时候出现在表单之下。在分析获得原因后，计算了一下花费的时间，从早上11:00开始正式投入，到下午4:00多，大概花费了4个小时多，基本就多半天的时间没了，因为分析后感觉原因很简单，但过程花费了这么多时间，于是分析了下自己在这个过程中到底将时间花在哪里了及原因。 Step 1: 现象分析【30min-】稍加分析便知道是因为z-index值初次设置不对，但z-index值是从何时哪里设置的，查找起来比较麻烦(项目比较庞大且是老项目和React糅合，业务也很复杂，看起来真的很费劲)。 Step 2: 顺藤摸瓜【1h30min+】从React项目的form的picker点击事件经中间衔接层到到老项目的$.dialog，其中对jQuery-ui不了解，熟悉了一下widget的生命周期，这个也花了不少时间，这其中更是由于业务关系，层层嵌套、继承，真的是**** Step 3: 弹窗起源[30min-]要想知道z-index的值是如何被赋予的，就必须知道整个弹窗是如何被创建然后挂载到DOM上的，其实找到dialog就好办多了，直接去看jquery-ui的源码就可以，dialog源码#_moveToTop Step 4: 解决问题？现在已经基本知道问题了，锁定在可视元素.ui-front类即可，第一次为什么没有设置z-index值，肯定是因为找不到可视的.ui-front类。可还有一个问题，线上环境第一次弹出却是正确的 Step 5: 线上为什么第一次弹出时就有了可视的.ui-front类？？？【1h30min+】说起这个可真是**，dialog源码#_createOverlay，如果options.modal是true的话，就动态的造一个，****，_createOverlay到现在还没理解用来干嘛的，也没issue，** 总结Step1-Step3可以说是正常消费，Step5完全是出乎意料，就不完全不懂作者的意图。总的来说，这其中消费了大量的时间，其实都是源于对jquery-ui的不熟，不然Step2、Step5基本可以省下来。算下来，除了Step5的时间花的不值得，其他时间消费还在情理之中。 经验教训凡是消费30min以上的问题查找，一定要重新提问(确定自己需要解决什么问题，现在正在解决什么问题)，确保查找方向不会走偏，要不真的就是在浪费时间。]]></content>
      <tags>
        <tag>工作日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS布局之Grid]]></title>
    <url>%2F2020%2F05%2F03%2FCSS%E5%B8%83%E5%B1%80%E4%B9%8BGrid%2F</url>
    <content type="text"><![CDATA[原文：https://css-tricks.com/snippets/css/complete-guide-grid/ 基本术语 Grid Contianer Grid Item Grid Line Grid Cell Grid Track Grid Area 横跨行或列的多个Cell集合 Grid Container的属性 display: grid | inline-grid; grid-template-columns: … | …; 单位可以是长度、百分比、fr（剩余空间占比） line-name可以指定一个更可读的名称，用来代替指个具体的line(默认是: 1~n, -n~-1)，可以在item里使用，同时可以指定多个line-name repeat()函数可更简洁方便的定义重复部分 多个line具有相同的line-name时，可以指定count来获取具体某一个line grid-template-rows grid-template-areas 定义grid-area .表示一个空格子 相同的name定义会组成一个area区域，可供Item直接使用 grid-template: none | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;; column-gap: &lt;line-size&gt;; row-gap: &lt;line-size&gt;; gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;; justify-items: start | end | center | stretch; 针对Cell对齐、Row align-items: start | end | center | stretch; 针对Cell对齐、Column place-items: &lt;align-items&gt; / &lt;justify-items&gt; justify-content: start | end | center | stretch | space-around | space-between | space-evenly; 针对Container、Row align-content: start | end | center | stretch | space-around | space-between | space-evenly; 针对Container、Column place-content: &lt;align-content&gt; / &lt;justify-content&gt; grid-auto-columns: &lt;track-size&gt; …; 定义容器之外的默认空间 grid-auto-rows: &lt;track-size&gt; …; grid Grid Item的属性 grid-column-start: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto; grid-column-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto; grid-row-start: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto; grid-row-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto; 可以使用z-index控制展示顺序 grid-column: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;; grid-row: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;; grid-area: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;; justify-self: start | end | center | stretch; align-self: start | end | center | stretch; place-self: &lt;align-self&gt; / &lt;justify-self&gt; 简记 Grid的布局方式更像是Table，但比Table更灵活，因为Grid的Item可以任意定义在Grid Container的某个指定区域。比起Flex也是更加强大，Flex只是单纯的在主轴|交叉轴上定义一个比较模糊的布局方式，还是继承了比较传统的流的概念，Grid让你可以进行很精确的布局，而且Item可以重叠(z-index，这就有点像position)，就像是定好的格子在那里，Item想要那些完全可以自己选择。]]></content>
      <tags>
        <tag>Css</tag>
        <tag>Grid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS布局之Flex]]></title>
    <url>%2F2020%2F04%2F28%2FCSS%E5%B8%83%E5%B1%80%E4%B9%8BFlex%2F</url>
    <content type="text"><![CDATA[原文：https://css-tricks.com/snippets/css/a-guide-to-flexbox/ 背景 在不知道元素具体尺寸的情况下，提供一种更有效的布局手段，对齐方式，以及在容器的各项之间分配空间。 基本术语 flex container flex item 主轴、交叉轴 main-statr/main-end、cross-start/cross-end main-size、cross-size 属性介绍 display: flex; flex-direction: row(default) | row-reverse | column | column-reverse; flex-wrap: nowrap(default) | wrap | wrap-reverse; flex-flow: row(default) nowrap(default); flex-direction 和 flex-wrap的简写 justify-content: flex-start(default) | flex-end | center | space-between | space-around | space-evenly | start | end | left | right … + safe | unsafe; start: item排列在writing-mode的方向 left: 和start很类似 Edge不支持space-between chrome不支持start/end/left/right 可靠的值为：flex-start、flex-end 和 center safe/unsafe ??? There are also two additional keywords you can pair with these values: safe and unsafe. Using safe ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). align-items: stretch(default) | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + … safe | unsafe; stretch: 交叉轴填充容器 baseline：items基于baseline对齐 left、right、safe、unsafe、start、end：大多数浏览器不支持 align-content: flex-start(default) | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + … safe | unsafe; 交叉轴上多行的对齐方式(justify-content是主轴上的对齐方式) 目标是轴，不是Item，注意和align-item的区别 order: 0(default); flex-grow: 0(default); flex-shrink: 0(default); flex-basis: auto(default); 设置flex item的初始值 MDN详细介绍 flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ] align-self: auto | flex-start | flex-end | center | baseline | stretch; 其他一些资源 https://bennettfeely.com/flexplorer/ https://bocoup.com/blog/dive-into-flexbox https://www.w3.org/TR/css-flexbox-1/ Bugs https://github.com/philipwalton/flexbugs]]></content>
      <tags>
        <tag>Css</tag>
        <tag>Flex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TypeScript之BasicTypes]]></title>
    <url>%2F2020%2F04%2F28%2FTypeScript%E4%B9%8BBasicTypes%2F</url>
    <content type="text"><![CDATA[原文：https://www.typescriptlang.org/docs/handbook/basic-types.html BooleanNumberStringArrayTuple 和Array很相似的类型，但Tuple的限制更多，有明确的的数量限制和各自元素对应的类型限制 EnumAnyVoidNull and UndefinedNeverObjectType assertions “angle-bracket” 语法 as关键字]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TypeScript之UtilityTypes]]></title>
    <url>%2F2020%2F04%2F28%2FTypeScript%E4%B9%8BUtilityTypes%2F</url>
    <content type="text"><![CDATA[原文：https://www.typescriptlang.org/docs/handbook/utility-types.html Partial&lt;T&gt; 构造一个和T一样的类型，并使得其所有属性为可选的 Readonly&lt;T&gt; 构造一个和T一样的类型，并使得其所有属性为只读 Record&lt;K,T&gt; 构造一个拥有属性K，值(Type)为T的的类型 Pick&lt;T,K&gt; 构造一个从T中取出一个集合K的类型 Omit&lt;T,K&gt; 构造一个和T一样的类型，然后删除K，和Pick刚好相反 Exclude&lt;T,U&gt; 构造一个和T一样的类型，但不包含U（注意和Omit的区别） Extract;T,U&gt;NonNullable&lt;T&gt;Parameters&lt;T&gt;ConstructorParameters&lt;T&gt;ReturnType&lt;T&gt;InstanceType&lt;T&gt;Required&lt;T&gt;ThisParameterTypeOmitThisParameterThisType&lt;T&gt;]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React如何知道一个函数是class？]]></title>
    <url>%2F2020%2F04%2F27%2FReact%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E6%98%AFclass%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[原文：https://overreacted.io/how-does-react-tell-a-class-from-a-function/ 问题：当你调用一个组件时，&lt;ComponentName /&gt;，你不知道ComponentName是一个function或class(尤其是在浏览器环境中，它们都是函数，大多情况被babel编译，如何区别Class和Function？？)，React内部需要做出区别，因为函数组件和类组件在React里是被区别对待的。 这个问题涉及到：new, this, class, arrow functions, prototype, proto, instanceof，还要考虑到被Babel编译后的情况。 this和new class和function class语法必须使用new操作符，否则会报错 大佬的这个表格很有必要： new Person() Person() class ✅ this is a Person instance 🔴 TypeError function ✅ this is a Person instance 😳 this is window or undefined 为什么不直接使用new操作符(来执行所有的函数、类) 箭头函数不能被new调用(箭头函数没有prototype，可以判断一个函数是否是箭头函数做差异化处理，但babel编译后不行) React组件支持String和其他基本类型，但是使用new操作对于函数返回的基本类型会直接忽略而返回一个对象，这是因为new操作符的设计本身如此 React到底是如何判断的呢？ React.Component：当你编写Class组件时，必须继承React.Component，继承相关，prototype问题，instanceof关键词，可以通过判断是否继承React.Component来作为Class的依据，但当页面有多份React的拷贝时instanceof将不再可靠 Component.prototype.isReactComponent：所以目前React的做法是在React.Component的原型上加了判断依据(static properties 容易丢失) If the final API is successful, its users never have to think about this process.—— by Dan Abramov]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我们为什么要使用super(props)]]></title>
    <url>%2F2020%2F04%2F27%2F%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8super%2F</url>
    <content type="text"><![CDATA[原文：https://overreacted.io/why-do-we-write-super-props/ 为什么调用super() ?答：调用super()后，才可以使用(parent定义的)this，所以如果你想在构造函数中使用this，Js会强制你首先调用super()函数 为什么传递props参数？答：React会将props合并到实例（即使你仅仅调用super()），但是在合并之前(super - 构造函数结束)，你无法使用this.props。对于使用context的组件，你为什么不调用super(props, context)？？和props一个原理，context在构造函数中使用的场景更少。如果你不需要在构造函数里做一些额外的工作，只是声明state的话，可以使用class fields proposal，类似 state = {}，那就不会有super的问题 1234567891011121314151617/ Inside Reactclass Component &#123; constructor(props) &#123; this.props = props; // ... &#125;&#125;// Inside your codeclass Button extends React.Component &#123; constructor(props) &#123; super(); // 😬 We forgot to pass props console.log(props); // ✅ &#123;&#125; console.log(this.props); // 😬 undefined &#125; // ...&#125;]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简记-2020-04-06]]></title>
    <url>%2F2020%2F04%2F06%2F%E7%AE%80%E8%AE%B0-2020-04-06%2F</url>
    <content type="text"><![CDATA[Symbol.hasInstance自定义instanceof操作 Babel Class 转ES5实现 箭头函数被定义为对象(实例)本身的属性 非箭头函数被定义在构造函数的原型 React this 丢失问题：https://reactjs.org/docs/faq-functions.html#why-is-binding-necessary-at-all 事件处理时丢失 props传递时丢失]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何学习——自学5年的感悟]]></title>
    <url>%2F2020%2F03%2F15%2F%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E8%87%AA%E5%AD%A65%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F%2F</url>
    <content type="text"><![CDATA[前言 今天翻过去的备忘录，看到了这样一句话： 每次接触一个新东西时，要先知道怎么学，做好规划，不然很容易半路放弃。 算算从大三开始自学，到现在已经快有5年多了，期间学过Java、Html、CSS、JS、jQuery、数据结构、Node.js、Webpack、VueJS、React、Python、PS、Unity3D、Three.js…… 学习目的不管学什么，每个人肯定都有其目的，这是你学习的动机。享用知识的过程能使你感到快乐，但学习的过程是痛苦的，因为要耗费你的脑细胞去记忆新的概念，你一定要认识到这一点，然后克服它。 资源整合要学一个新东西，必须对其整体有一个了解： 背景历史（为什么存在？解决了什么问题？） 发展现状（有何重大核心改变？是否有相同的知识框架存在？差异性比较？） 可用资源整理： 官网资源 图书出版 视频教程 社区博客 学习计划（提醒事项） 网上搜索是否有前辈的学习流程 根据自己的学习目的，考虑学习的深度 仅限于使用 深度解读：一定要做笔记 根据知识的分块，内容多少进行相应梳理 时间安排（ 提醒事项） 进度记录（周期更长的提醒事项） 问题记录（备忘录） 简单问题 复杂问题（都需记录在学习日记中） 为什么会有这种问题？ 如何解决？ 解决方案？ 总结对于一个庞大的知识体系，学习是一个漫长而又枯燥的过程，很容易半途而废，除非你在学习过程中能够找到运用它的乐趣。个人觉得学习计划是整个学习环节中最重要的一环，所以不要急于求成，一定要先明确学习计划，然后严格执行。相信等你到计划的最后一步时，回过头来看自己，肯定比预期还要收获的更多。 多年后，菜鸟变成了大佬。]]></content>
      <tags>
        <tag>如何学习</tag>
        <tag>自我管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Html 5 Drag API 实现一个可拖拽排序的列表]]></title>
    <url>%2F2020%2F03%2F10%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Html-5-Drag-API-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8F%AF%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F%E7%9A%84%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[背景项目中遇到一个需要拖拽排序的功能，稍微研究了下拖拽方面的东西。 针对React比较流行的库有： react-draggable: 纯粹使用transform进行移动，pass掉 react-dnd：基于h5拖放API，OK 接着便开始着手研究react-dnd的文档，稍微有点复杂，核心还是把元素的拖拽行为变为数据的拖拽行为，符合React的一贯作风。但我觉得就一个排序的拖拽，这个库有稍微有点复杂了。而且库本身体积还挺大的(746 kB)，于是就放弃了，开始直接研究原始的API。 如何实现 ondragstart对可拖拽的目标注册ondragstart事件，记录该目标的索引 ondragover对投放目标添加ondragover事件，并将元素索引绑定至data-index，接着在事件函数里判断被拖拽的元素索引和当前投放目标的索引(此处要注意event.target和event.currentTarget的区别)，并未其添加相应hover样式。 ondragleave还要对投放目标添加ondragleave事件，这个是和ondragover事件相对应起来的，需要将ondragover里做的一些事情复原，比如样式的改动 ondrop最后一步就是目标投放，还是为投放目标添加ondrop事件，然后在ondrop事件里可以拿到当前投放的索引，以及之前在ondragstart事件里记录的被拖拽索引。接着就是改变列表list的顺序就可以了。]]></content>
      <tags>
        <tag>React</tag>
        <tag>HTML 5 拖放</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[借助Hooks API创建局部模块类Redux的数据流]]></title>
    <url>%2F2020%2F03%2F08%2F%E5%80%9F%E5%8A%A9Hooks-API%E5%88%9B%E5%BB%BA%E5%B1%80%E9%83%A8%E6%A8%A1%E5%9D%97%E7%B1%BBRedux%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%2F</url>
    <content type="text"><![CDATA[背景目前做的项目每个模块都单独分离，不再和整体应用内聚，所以在对redux等全局工具的使用上就显得有些笨手笨脚。纵使模块高度分离，但是大部分的模块应用复杂度仍然很高。 之前一直使用contex来管理模块顶层数据，但这会使模块顶层组件变得臃肿难懂。 最近研究了下Hooks API，觉得非常符合现在的开发模式，因为借助useReducer和contex可以基本实现一个局部的类redux的开发流程，以使得单个模块内有清晰的数据流。 如何实现 简单示例https://github.com/iWuzhi/react-hooks-practice]]></content>
      <tags>
        <tag>React</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[antd#Form bug]]></title>
    <url>%2F2020%2F03%2F07%2Fantd-form-bug%2F</url>
    <content type="text"><![CDATA[现象Antd#Form.getFieldDecorator使用nodeName作为表单字段时，会报错： 1Uncaught TypeError: element.nodeName.toLowerCase is not a function 如何重现https://github.com/iWuzhi/antd-form-bug 已知issue https://github.com/ant-design/ant-design/issues?q=nodeName https://github.com/facebook/react/issues/6284 原因 https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement 对于HTMLFormElement可以通过id或name获取Form下的一个表单项(Input, Select等)， 当id或name为nodeName时，会覆盖HTMLFormElement原有的nodeName属性 即：&apos;FORM&apos; =&gt; Element 将一个字符串类型改为一个Element节点 所以调用toLowerCase报错]]></content>
      <tags>
        <tag>React</tag>
        <tag>Antd</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2020，继续]]></title>
    <url>%2F2020%2F03%2F02%2F2020%EF%BC%8C%E7%BB%A7%E7%BB%AD%2F</url>
    <content type="text"><![CDATA[回家时没有带电脑 疫情期间一个月的空白 但也不是什么都没干 回家时带了三本书：两本计算机网络、一本程序员的数学 返程时多了两个笔记本，带不动了，书现在还在路上 等书到了，再梳理补下 疫情断点 2020，继续]]></content>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令记录]]></title>
    <url>%2F2020%2F01%2F18%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[基础配置 git config – global user.name/email git config –global alias.visual ‘!gitk’（别名配置，方便快速使用一些繁琐或不方便记忆的命令） 帮助 git help &lt;verb&gt; 初始化 git init git clone 基础 操作 git status（当前状态，未跟踪、未改变、已改变、已暂存） git add git commit git commit -m &#39;message&#39; git commit -a -m &#39;message&#39; git rm git rm –cache（不删除已存在文件，新增.gitignore时很有用） git log git log -p git log –oneline git log –stat 撤销操作 git commit –amend（忘记提交一些东西或者提交message错误时很有用） git reset（常见的git reset HEAD，取消暂存） git checkout –（文件恢复） 忽略文件(.gitignore) 文件格式 glob（文件）匹配模式 匹配注意事项：如开头/防止递归 远程仓库 SSH key: ssh-keygen git remote git remote -v（所有本地到远程仓库的映射） git remote add（一个已存在的本地项目初始化时经常用到） git remote rename（远程地址变更时） git remote rm（远程地址变更时） git fetch git push git pull（fetch + merge） 分支 git branch git branch -d 本地分支（删除本地分支） git push origin :远程分支（删除远程分支） git branch -v/-a git fetch origin :远程分支（会在本地新建一个分支） git checkout git checkout 分支 git checkout -b 分支 git merge/rebase（分支合并） git cherry-pick（随意pick一些离散的commit） 标签 git tag git tag -a version -m ‘message’（当前HEAD） git tag -a version 某个提交（某个commit） git push –tags git tag -d 标签（删除本地） git push origin :refs/tags/标签（远程） git checkout -b 分支名 标签（从标签检出分支） HEAD HEAD分离 ^相对HEAD移动，后面加数字表示第几个父节点（merge会有多余一个节点可能） ~相对HEAD移动，后面加数字表示移动位置 Git Hooks git规范 学习资源 Git官网：https://git-scm.com/book/zh/v2 一个可视化闯关式练习：https://learngitbranching.js.org/]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React文档阅读之Hooks]]></title>
    <url>%2F2020%2F01%2F12%2FReact%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E4%B9%8BHooks%2F</url>
    <content type="text"><![CDATA[简介Hooks是在16.8新增的功能，它们能够让你在没有Class的情况下使用state和其他React功能。 为什么要新增Hooks？ 组件之间难以共享状态逻辑(props + HOC，wrapper hell) 复杂组件难以理解（重复的逻辑，初始化/更新/卸载） JavaScript class机制对于人们造成的误解（this指向） 我该什么时候使用Hooks？ 如果你喜欢Hooks，可以在新增的功能产品上使用Hooks 不建议将以前的代码全部重写 Hooks概览 State Hook: useState() Effect Hook: useEffect() Hooks规则： 只允许在函数顶层使用Hooks，不允许在条件、循环、内部函数里使用 只允许在函数组件或自定义的Hooks里调用Hooks 可以使用linter pluginl避免违反上面规则 创建你自己的Hooks(自定义Hooks) 其他Hooks useContext useReducer 使用State Hook（useState()干了什么？） 声明一个状态变量，这个变量会被React存储 useState(‘hello’)，hello是该状态变量的默认值 useState()返回一个数组，[state, setState]，state表示这个状态变量，setState用来更新这个状态变量 可以通过多次调用useState()函数以声明多个状态变量 Effect Hook（useEffect()干了什么？） Effect Hook可以让你在函数组件里执行一些副作用的操作，比如数据获取、手动更新DOM等 useEffect()会在每次render的时候都会重新调用(可能会有性能问题) useEffect()第二个参数可以用来控制是否在render的过程中重新执行 可以在回调函数里返回一个卸载函数（就像componentWillUnmount）,不像class，这种返回函数的写法可以将某个逻辑中注册和清除的工作放在一起 可以使用Effect Hook将逻辑分割成不同的自定义Hook，已达到代码分割及复用的目的 Hooks规则（为什么会有这些规则） React依赖于Hooks的调用顺序 我们在声明一个状态变量的时候，没有给定一个key或者其他的唯一标识。React会存储我们声明的状态变量，每次render之后，再次调用useState()会根据调用次序正确返回已存储的状态变量。 构建你自己的Hooks 一个Hooks可以返回一个状态值（类似state），且这个值可变，而改变的逻辑就在定义这个Hooks的函数中 一般自定义最底层的Hooks都会用到系统Hooks（useState、useEffect等） 下面是一个简单的例子： 123456789101112131415161718192021222324252627282930const &#123; useState, useEffect &#125; = React;function useTime() &#123; const [time, setTime] = useState(); useEffect(() =&gt; &#123; setTimeout(() =&gt; &#123; setTime(Date.now()); &#125;, 1000); &#125;) return time;&#125;function MyHooks(props) &#123; const time = useTime(); return ( &lt;h3&gt;&#123;time&#125;&lt;/h3&gt; );&#125;class TodoApp extends React.Component &#123; render() &#123; return ( &lt;div&gt; &lt;MyHooks /&gt; &lt;/div&gt; ) &#125;&#125;ReactDOM.render(&lt;TodoApp /&gt;, document.querySelector("#app")) Hooks API引用 基础Hooks useState useEffect useContext 其它Hooks useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue Hooks FAQ 使用策略 版本：16.8 当前Hooks并未覆盖所有的class场景，如getSnapshotBeforeUpdate、componentDidCatch生命周期，还有部分三方库可能不支持 和Redux集成，React Redux since v7.1.0已经支持Hooks方式，之前版本可仍使用以前的方式 静态类型：Flow和TypeScript React定义已经支持React Hooks 测试使用Hooks的组件 lint 规则强制做了哪些： Hooks本身在一个函数组件或另一个Hooks里 Hooks每次调用顺序不会变 从Classes到Hooks 生命周期映射]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>React文档阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一周总结（2019-01-06~2020-01-12）]]></title>
    <url>%2F2020%2F01%2F12%2F%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-01-06-2020-01-12%EF%BC%89%2F</url>
    <content type="text"><![CDATA[主线任务 React应用场景思考 ECMA版本总结 MDN网站记忆 副本任务 《程序员的数学》列入计划 flutter日常练习（接下来会搁置一段时间，时间上不允许，优先级降低） 语言基础 布局方式 常用Widget leetcode刷题：字符串、链表 每周任务 正则表达式（接下来可能会延长周期至月） vim快捷键复习（接下来可能会延长周期至月） 其他 http协议：做了简单规划，接下来会列入日常任务]]></content>
      <tags>
        <tag>一周总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一周资讯总结（2019-01-06~2019-01-12）]]></title>
    <url>%2F2020%2F01%2F12%2F%E4%B8%80%E5%91%A8%E8%B5%84%E8%AE%AF%E6%80%BB%E7%BB%93%EF%BC%882019-01-06-2019-01-12%EF%BC%89%2F</url>
    <content type="text"><![CDATA[（来源）twitter Puppeteer: https://www.npmjs.com/package/puppeteer 几篇关于浏览器原理的文章： https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/ https://docs.google.com/presentation/d/1boPxbgNrTU0ddsc144rcXayGA_WF53k96imRH8Mp34Y/edit#slide=id.g60f92a5151_40_120 https://developers.google.com/web/updates/2018/09/inside-browser-part1 babel/7.8.0(ESMAScript 2020): https://babeljs.io/blog/2020/01/11/7.8.0 2019JavaScript Rising Stars: https://risingstars.js.org/2019/en/]]></content>
      <tags>
        <tag>一周总结</tag>
        <tag>资讯总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式每周练习之RegexGolf]]></title>
    <url>%2F2020%2F01%2F11%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%AF%8F%E5%91%A8%E7%BB%83%E4%B9%A0%E4%B9%8BRegexGolf%2F</url>
    <content type="text"><![CDATA[关于RegexGolfRegexGolf是一个很不错的练习正则表达式的在线网站。 练习记录 Warmup：foo Anchors：k$ It never ends：u\b Ranges：^[a-f]*$ Backrefs：(…)\w*\1 Abba：^(?!.*(.)(.)\2\1) A man, a plan：^(.)(.).*\2\1$ Prime：^(?!(xx+)\1+$) Four： (.)(.\1){3} Order：^.{5}[^e]?$ 断点后面几道题有点变态，后面刷]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《程序员的数学2概率统计》读书笔记]]></title>
    <url>%2F2020%2F01%2F09%2F%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%A62%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[第一部分 聊聊概率这件事第一章 概率的定义 三扇门（蒙题霍尔问题）百度链接 如果我们太执着于结果，即在主持人打开一扇错误的门时，我们便立刻将这扇错误的门排除在外，得到结论：剩下的两扇门正确或错误各1/2。而如果我们站在起点考虑，第一次选择错误的概率为2/3，主持人将剩余两扇门再排除其中错误的一个，即第一次假定自己选择错误，那么重新选择必将获得正确的结果，概率为2/3。 书中总结道： 问题：考虑有100扇门而主持人将打开其中98扇的情况 对于某个特定的世界（ω）来说，所有的结果都已确定，不存在任何随机事件。 每个世界结果完全确定，然而人们无法知晓自己住在哪个世界 将概率问题转化为完全确定的面积问题 三元组（Ω，Ϝ，P）ω表示具体的某一个世界，Ω表示所有平行世界组成的集合]]></content>
      <tags>
        <tag>读书笔记</tag>
        <tag>程序员的数学</tag>
        <tag>程序员的数学2概率统计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES版本解读总结]]></title>
    <url>%2F2020%2F01%2F07%2FES%E7%89%88%E6%9C%AC%E8%A7%A3%E8%AF%BB%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[从ES5以来，ES6(ECMAScript 2015)这个版本是变化内容最大的一次，之后的版本变化都较小。 自己这边几篇文章都是跑脚本自动生成的： ES版本解读系列 然后今天在Twitter上刷到一篇总结的很不错的文章：https://inspiredwebdev.com/everything-from-es-2016-to-es-2019#section_11 所以自己在ES版本方面的了解要告一段落了，有空直接去看上面链接就好了。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我如何写React代码之Context]]></title>
    <url>%2F2020%2F01%2F06%2F%E6%88%91%E5%A6%82%E4%BD%95%E5%86%99React%E4%BB%A3%E7%A0%81%E4%B9%8BContext%2F</url>
    <content type="text"><![CDATA[背景我如何写React代码之原始人 我该用Context吗？ https://reactjs.org/docs/context.html https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076 Context能做什么？ Context provides a way to pass data through the component tree without having to pass props down manually at every level. 所以在需要对子组件传递一些props，而且嵌套比较深的时候，可以考虑使用Context. 我该如何使用？ 注意事项 只要Provider的value变化consumers就会重新渲染，和shouldComponentUpdate没有关系 Provider的value是否变化的算法和Object.is()一致@可能会遇到的问题 React.Component.contextType属性： 因为context是react内置的API，所以这个属性也相当于是给Context的使用(consumer)提供了一种简洁的方式 限制：只会使用最近Provider提供的value值，且只能使用这一个Context Context.Consumer 这个是堂堂正正的ContextAPI，以函数回调的方式订阅context的变化，可以通过多层嵌套使用不同Provider提供的context 缺点：没有contextType那么简洁 扩展 React router是如何使用ContextAPI的？ Redux和Context如何选择]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>我如何写React代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一周总结（2019-12-30~2020-01-05）]]></title>
    <url>%2F2020%2F01%2F05%2F%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-12-30-2020-01-05%EF%BC%89%2F</url>
    <content type="text"><![CDATA[主线任务 ES版本解读 MDN JS API 日常训练 Flutter日常练习 关于React的一些感悟 副本剧情 网页爬虫体验 React源码(React.Context如何实现) LeetCode刷题（字符串刷完了） Unity3D尝试 周期训练 正则表达式 捕获括号：如何使用\1\2…捕获进行重复匹配（经典示例：回文串） RegExp.exec: 全局匹配模式下如何遍历得到所有匹配结果 vim练习：常用快捷键练习]]></content>
      <tags>
        <tag>一周总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一周资讯总结（2019-12-30~2020-01-05）]]></title>
    <url>%2F2020%2F01%2F04%2F%E4%B8%80%E5%91%A8%E8%B5%84%E8%AE%AF%E6%80%BB%E7%BB%93%EF%BC%882019-12-30-2020-01-05%EF%BC%89%2F</url>
    <content type="text"><![CDATA[（来源）Twitter XState(内容和redux有点像)：https://xstate.js.org/ Jenkins X：https://jenkins-x.io/]]></content>
      <tags>
        <tag>一周总结</tag>
        <tag>资讯总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我如何写React代码之原始人]]></title>
    <url>%2F2020%2F01%2F03%2F%E6%88%91%E5%A6%82%E4%BD%95%E5%86%99React%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%8E%9F%E5%A7%8B%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[前言因为前一段时间的一些经历，让我想了很多。现在敲代码都是要多加一道工序，不仅仅满足于：我用这个API可以实现这个功能，而是要问自己：我为什么要用这个API或这种方式去实现这个功能？带着问题写业务的这段时间，感触比较多，所以想在此记录下。 有新需求了下图是一个很常见的PC布局： React的核心思想就是组件化，开发时可以将功能或UI划分成不同的小型组件，然后再组合在一起完成完整的业务功能。每个小组件都只负责某一块功能的实现和交互，这对于多人协作（任务分配），以及后期维护（每个组件的功能单一）都是非常具有优势的。 看到（第一眼）视觉稿的我，在心里已经将其大卸八块，正如上图所标示的那样，某某组件、某某组件…Perfect ! 终于要码代码了，Go接着就要开始专注于其中的一个’某某组件’了。这时主要关注的就以下这些问题了： 这个组件需要哪些state，又需要哪些props？ 生命周期有必要使用吗？（业务需要） 我要用React.Compoent还是React.PureComponent? 我要用function还是class？ UI展示/CSS相关（忽略） 基本元素使用/HTML相关（忽略） 该组合这些小玩意了上知需求文档，下晓交互视觉，很快将剩下的小零件都设计并开发完了。接着就需要一些容器组件如Layout之类的来组合这些小零件了。这时你就会发现，在一个非常底层的某个小零件需要的props却要在或许是最顶层的容器组件中作为state来管理，如下图： 因为props要必须要一层一层的传递下来，所以或许会破坏中间某些容器组件或其他高级组件（组合组件）的设计合理性，因为要强行增加一个或许不需要的props。 一两个这种情况或许还能忍受，但如果传递的props比较多的话，会特别麻烦，所以有些人就干脆不零件化了，干脆整个页面/或某一个功能就是一个单独的组件，没有props。这个组件管理着所有的state（我见过有很多人就是这样写代码的，常常一份文件就有4、500行代码），这其实会造成一个更大的问题，随着业务的更新迭代，代码会变得越来越难维护。 这其实就相当于是一种的逃避的行为，因为我们的问题是props如何传递，而不是不需要更细更小的组件，我们需要它，因为它很完美（功能单一，props传递和小组件本身没有关系）。 我该怎么办在没有context、没有redux的世界，我选择的是props传递的痛苦，因为我根本无法忍受所有混杂的state放在一起，无论是命名冲突还是查找使用，都会带来极大的不便。或许你可以通过事件机制，像addEventListener()那样，在需要管理state的容器组件里添加事件，然后在小零件里触发事件去更新state，这样可以减少props更新(方法)的传递，也或许可以以同样的方式将小零件的state和容器组件的state做同步，这样就直接不用传递props。这种事件的机制，其实已经和Redux的Connect很像了，只是state的存储位置以及更新方式不同。 进击的原始人下一篇：我如何写React代码之Context]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>我如何写React代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日常使用工具记录]]></title>
    <url>%2F2020%2F01%2F01%2F%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[网页抓取 superagent：HTTP客户端 cheerio：像jQuery一样分析网页 Node nodemon：热重载 fs-extra：更加简洁的文件读写API]]></content>
      <tags>
        <tag>工具</tag>
        <tag>日常工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我如何从MDN文档分析ESMAScript版本信息]]></title>
    <url>%2F2020%2F01%2F01%2F%E6%88%91%E5%A6%82%E4%BD%95%E4%BB%8EMDN%E6%96%87%E6%A1%A3%E5%88%86%E6%9E%90ESMAScript%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[背景想整理下JavaScript各个版本的changelog，但找了很多资料都没有一个有效的方式。ESMA规范没有找到相关变更变化，只能追踪最近的版本日志。网上其他的ES6版本中都插入了或多或少的其他版本（如阮一峰ES6）。最后想手动整理，但感觉有点多，再结合自己目前的整理方式（读MDN API，然后校对相应版本再记录），直接写了这个脚本从MDN拉数据了，然后再将其转换成MD格式即可。 考虑到目的，目前需要做的事情： 从MDN拉取HTML文档 解析相应元素，获得版本信息 转换成markdown格式 找了以下三方库： 1234&quot;fs-extra&quot;: &quot;^8.1.0&quot;, // 读写文件&quot;superagent&quot;: &quot;^5.1.3&quot; // 用于读取网页客户端&quot;nodemon&quot;: &quot;^2.0.2&quot; // 方便开发环境调试&quot;cheerio&quot;: &quot;^1.0.0-rc.3&quot;, // 像jQuery一样获取DOM元素 如何使用 版本要求： node: &gt; v12.6.0 获取代码： git clone git@github.com:iWuzhi/es-script-version.git 安装依赖： npm i 抓取原始数据： npm run fetch markdown文件生成： npm run revert 文件说明 ESMA_XXXXStore.js：从MDM拉取的原始HTML构造的JSON数据 ESMA_XXXXStore.md: 对应版本的目标文件(markdown格式) 问题目前只拉取了内置对象这一大模块，其中部分API貌似没有拉取成功。 总结整体还需要再校对一次，毕竟目的是学习记忆，而不是单纯的记录版本信息。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript版本拾荒记——ES2015]]></title>
    <url>%2F2019%2F12%2F30%2FJavaScript%E7%89%88%E6%9C%AC%E6%8B%BE%E8%8D%92%E8%AE%B0%E2%80%94%E2%80%94ES2015%2F</url>
    <content type="text"><![CDATA[Array Array.from Array.of Array.copyWithin Array.entries Array.fill Array.find Array.findIndex Array.forEach Array.keys Array.values Array.@@iterator Array.@@species ArrayBuffer ArrayBuffer.isView ArrayBuffer.slice BigUint64Array BigUint64Array.from BigUint64Array.of BigUint64Array.copyWithin BigUint64Array.entries BigUint64Array.every BigUint64Array.fill BigUint64Array.filter BigUint64Array.find BigUint64Array.findIndex BigUint64Array.forEach BigUint64Array.indexOf BigUint64Array.join BigUint64Array.keys BigUint64Array.lastIndexOf BigUint64Array.map BigUint64Array.reduce BigUint64Array.reduceRight BigUint64Array.reverse BigUint64Array.set BigUint64Array.slice BigUint64Array.some BigUint64Array.sort BigUint64Array.subarray BigUint64Array.toLocaleString BigUint64Array.toString BigUint64Array.values BigUint64Array.@@iterator DataView DataView.getFloat32 DataView.getFloat64 DataView.getInt16 DataView.getInt32 DataView.getInt8 DataView.getUint16 DataView.getUint32 DataView.getUint8 DataView.setFloat32 DataView.setFloat64 DataView.setInt16 DataView.setInt32 DataView.setInt8 DataView.setUint16 DataView.setUint32 DataView.setUint8 Date Date.getDay Date.@@toPrimitive Float32Array Float32Array.from Float32Array.of Float32Array.copyWithin Float32Array.entries Float32Array.every Float32Array.fill Float32Array.filter Float32Array.find Float32Array.findIndex Float32Array.forEach Float32Array.indexOf Float32Array.join Float32Array.keys Float32Array.lastIndexOf Float32Array.map Float32Array.reduce Float32Array.reduceRight Float32Array.reverse Float32Array.set Float32Array.slice Float32Array.some Float32Array.sort Float32Array.subarray Float32Array.toLocaleString Float32Array.toString Float32Array.values Float32Array.@@iterator Float64Array Float64Array.from Float64Array.of Float64Array.copyWithin Float64Array.entries Float64Array.every Float64Array.fill Float64Array.filter Float64Array.find Float64Array.findIndex Float64Array.forEach Float64Array.indexOf Float64Array.join Float64Array.keys Float64Array.lastIndexOf Float64Array.map Float64Array.reduce Float64Array.reduceRight Float64Array.reverse Float64Array.set Float64Array.slice Float64Array.some Float64Array.sort Float64Array.subarray Float64Array.toLocaleString Float64Array.toString Float64Array.values Float64Array.@@iterator Generator Generator.next Generator.return Generator.throw Int16Array Int16Array.from Int16Array.of Int16Array.copyWithin Int16Array.entries Int16Array.every Int16Array.fill Int16Array.filter Int16Array.find Int16Array.findIndex Int16Array.forEach Int16Array.indexOf Int16Array.join Int16Array.keys Int16Array.lastIndexOf Int16Array.map Int16Array.reduce Int16Array.reduceRight Int16Array.reverse Int16Array.set Int16Array.slice Int16Array.some Int16Array.sort Int16Array.subarray Int16Array.toLocaleString Int16Array.toString Int16Array.values Int16Array.@@iterator Int32Array Int32Array.from Int32Array.of Int32Array.copyWithin Int32Array.entries Int32Array.every Int32Array.fill Int32Array.filter Int32Array.find Int32Array.findIndex Int32Array.forEach Int32Array.indexOf Int32Array.join Int32Array.keys Int32Array.lastIndexOf Int32Array.map Int32Array.reduce Int32Array.reduceRight Int32Array.reverse Int32Array.set Int32Array.slice Int32Array.some Int32Array.sort Int32Array.subarray Int32Array.toLocaleString Int32Array.toString Int32Array.values Int32Array.@@iterator Int8Array Int8Array.from Int8Array.of Int8Array.copyWithin Int8Array.entries Int8Array.every Int8Array.fill Int8Array.filter Int8Array.find Int8Array.findIndex Int8Array.forEach Int8Array.indexOf Int8Array.join Int8Array.keys Int8Array.lastIndexOf Int8Array.map Int8Array.reduce Int8Array.reduceRight Int8Array.reverse Int8Array.set Int8Array.slice Int8Array.some Int8Array.sort Int8Array.subarray Int8Array.toLocaleString Int8Array.toString Int8Array.values Int8Array.@@iterator Map Map.clear Map.delete Map.forEach Map.get Map.has Map.keys Map.set Map.values Map.@@iterator Math Math.%E5%8F%8D%E5%8F%8C%E6%9B%B2%E4%BD%99%E5%BC%A6%E5%80%BC Math.asinh Math.atanh Math.cbrt Math.clz32 Math.cosh Math.expm1 Math.fround Math.hypot Math.log10 Math.log1p Math.log2 Math.sign Math.sinh Math.tanh Math.trunc Number Number.isFinite Number.isInteger Number.isNaN Number.isSafeInteger Number.parseFloat Object Object.assign Object.getOwnPropertySymbols Object.is Object.hasOwnProperty Promise Promise.all Promise.then Promise.race Promise.reject Promise.resolve Proxy Proxy.apply Proxy.construct Proxy.defineProperty Proxy.deleteProperty Proxy.get Proxy.getOwnPropertyDescriptor Proxy.getPrototypeOf Proxy.has Proxy.isExtensible Proxy.ownKeys Proxy.preventExtensions Proxy.set Proxy.setPrototypeOf Reflect Reflect.apply Reflect.construct Reflect.defineProperty Reflect.deleteProperty Reflect.get Reflect.getOwnPropertyDescriptor Reflect.getPrototypeOf Reflect.has Reflect.isExtensible Reflect.ownKeys Reflect.preventExtensions Reflect.set Reflect.setPrototypeOf RegExp RegExp.compile RegExp.@@match RegExp.@@replace RegExp.@@search RegExp.@@split Set Set.add Set.clear Set.delete Set.entries Set.forEach Set.has Set.values Set.@@iterator String String.fromCodePoint String.anchor String.big String.blink String.bold String.codePointAt String.endsWith String.fixed String.fontcolor String.fontsize String.italics String.link String.repeat String.slice String.small String.startsWith String.strike String.sub String.sup String.raw Symbol Symbol.for Symbol.keyFor Symbol.toString Symbol.valueOf Symbol.@@toPrimitive TypedArray TypedArray.from TypedArray.of TypedArray.copyWithin TypedArray.entries TypedArray.every TypedArray.fill TypedArray.filter TypedArray.find TypedArray.findIndex TypedArray.forEach TypedArray.indexOf TypedArray.join TypedArray.keys TypedArray.lastIndexOf TypedArray.map TypedArray.reduce TypedArray.reduceRight TypedArray.reverse TypedArray.set TypedArray.slice TypedArray.some TypedArray.sort TypedArray.subarray TypedArray.toLocaleString TypedArray.toString TypedArray.values TypedArray.@@iterator Uint16Array Uint16Array.from Uint16Array.of Uint16Array.copyWithin Uint16Array.entries Uint16Array.every Uint16Array.fill Uint16Array.filter Uint16Array.find Uint16Array.findIndex Uint16Array.forEach Uint16Array.indexOf Uint16Array.join Uint16Array.keys Uint16Array.lastIndexOf Uint16Array.map Uint16Array.reduce Uint16Array.reduceRight Uint16Array.reverse Uint16Array.set Uint16Array.slice Uint16Array.some Uint16Array.sort Uint16Array.subarray Uint16Array.toLocaleString Uint16Array.toString Uint16Array.values Uint16Array.@@iterator Uint32Array Uint32Array.from Uint32Array.of Uint32Array.copyWithin Uint32Array.entries Uint32Array.every Uint32Array.fill Uint32Array.filter Uint32Array.find Uint32Array.findIndex Uint32Array.forEach Uint32Array.indexOf Uint32Array.join Uint32Array.keys Uint32Array.lastIndexOf Uint32Array.map Uint32Array.reduce Uint32Array.reduceRight Uint32Array.reverse Uint32Array.set Uint32Array.slice Uint32Array.some Uint32Array.sort Uint32Array.subarray Uint32Array.toLocaleString Uint32Array.toString Uint32Array.values Uint32Array.@@iterator Uint8Array Uint8Array.from Uint8Array.of Uint8Array.copyWithin Uint8Array.entries Uint8Array.every Uint8Array.fill Uint8Array.filter Uint8Array.find Uint8Array.findIndex Uint8Array.forEach Uint8Array.indexOf Uint8Array.join Uint8Array.keys Uint8Array.lastIndexOf Uint8Array.map Uint8Array.reduce Uint8Array.reduceRight Uint8Array.reverse Uint8Array.set Uint8Array.slice Uint8Array.some Uint8Array.sort Uint8Array.subarray Uint8Array.toLocaleString Uint8Array.toString Uint8Array.values Uint8Array.@@iterator Uint8ClampedArray Uint8ClampedArray.from Uint8ClampedArray.of Uint8ClampedArray.copyWithin Uint8ClampedArray.entries Uint8ClampedArray.every Uint8ClampedArray.fill Uint8ClampedArray.filter Uint8ClampedArray.find Uint8ClampedArray.findIndex Uint8ClampedArray.forEach Uint8ClampedArray.indexOf Uint8ClampedArray.join Uint8ClampedArray.keys Uint8ClampedArray.lastIndexOf Uint8ClampedArray.map Uint8ClampedArray.reduce Uint8ClampedArray.reduceRight Uint8ClampedArray.reverse Uint8ClampedArray.set Uint8ClampedArray.slice Uint8ClampedArray.some Uint8ClampedArray.sort Uint8ClampedArray.subarray Uint8ClampedArray.toLocaleString Uint8ClampedArray.toString Uint8ClampedArray.values Uint8ClampedArray.@@iterator WeakMap WeakMap.delete WeakMap.get WeakMap.has WeakMap.set WeakSet WeakSet.add WeakSet.delete WeakSet.has]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
        <tag>ES2015</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript版本拾荒记——ES2020]]></title>
    <url>%2F2019%2F12%2F30%2FJavaScript%E7%89%88%E6%9C%AC%E6%8B%BE%E8%8D%92%E8%AE%B0%E2%80%94%E2%80%94ES2020%2F</url>
    <content type="text"></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
        <tag>ES2020</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript版本拾荒记——ES2019]]></title>
    <url>%2F2019%2F12%2F30%2FJavaScript%E7%89%88%E6%9C%AC%E6%8B%BE%E8%8D%92%E8%AE%B0%E2%80%94%E2%80%94ES2019%2F</url>
    <content type="text"><![CDATA[Array.prototype.flat()/ Array.prototype.flatMap()Object.fromEntries()String.prototype.trimStart() / .trimEnd()Optional Catch BindingFunction.prototype.toString()]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
        <tag>ES2019</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript版本拾荒记——ES2018]]></title>
    <url>%2F2019%2F12%2F30%2FJavaScript%E7%89%88%E6%9C%AC%E6%8B%BE%E8%8D%92%E8%AE%B0%E2%80%94%E2%80%94ES2018%2F</url>
    <content type="text"><![CDATA[对象Rest / Spread (ES5数组解构)Asynchronous Iteration（for…await）Promise.prototype.finally()]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
        <tag>ES2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript版本拾荒记——ES2017]]></title>
    <url>%2F2019%2F12%2F30%2FJavaScript%E7%89%88%E6%9C%AC%E6%8B%BE%E8%8D%92%E8%AE%B0%E2%80%94%E2%80%94ES2017%2F</url>
    <content type="text"><![CDATA[常用String1. String.padEnd 2. String.padStartObject1. Object.entries 2. Object.getOwnPropertyDescriptors 3. Object.valuesasync/awiat全部Object Object.entries Object.getOwnPropertyDescriptors Object.values String String.padEnd String.padStart]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
        <tag>ES2017</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript版本拾荒记——ES2016]]></title>
    <url>%2F2019%2F12%2F30%2FJavaScript%E7%89%88%E6%9C%AC%E6%8B%BE%E8%8D%92%E8%AE%B0%E2%80%94%E2%80%94ES2016%2F</url>
    <content type="text"><![CDATA[常用 Array.prototype.includes() 指数操作符(**) 1Math.pow(2, 4) === 2 ** 4 全部Array Array.includes BigUint64Array BigUint64Array.includes Float32Array Float32Array.includes Float64Array Float64Array.includes Int16Array Int16Array.includes Int32Array Int32Array.includes Int8Array Int8Array.includes TypedArray TypedArray.includes Uint16Array Uint16Array.includes Uint32Array Uint32Array.includes Uint8Array Uint8Array.includes Uint8ClampedArray Uint8ClampedArray.includes]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
        <tag>ES2016</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一周总结（2019-12-23~2019-12-29）]]></title>
    <url>%2F2019%2F12%2F29%2F%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-12-23-2019-12-29%EF%BC%89%2F</url>
    <content type="text"><![CDATA[主线任务 将ES版本解读替换为正则表达式（本周练习频率：每天） 目前对于正则表达式的了解程度已经足够，之后做周期性练习即可（每周） Vim（本周练习频率：每天） 本周对Vim也做了大量的练习，记录了一些常用的键位及练习方式，之后也会做周期性练习（每周） VScode 利用闲暇时间对编辑器常用功能做了整理，因为是日用软件，所以不必刻意练习 Terminal 记录了一些常用快捷键，也是日用频率吧，不必刻意练习 副本剧情 leetcode刷题：数组刷完了，字符串也刷了一部分 git高级操作：https://learngitbranching.js.org/ GraphQL：对GraphQL做了一些简单的了解，后续有时间会进一步了解]]></content>
      <tags>
        <tag>一周总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flutter环境搭建]]></title>
    <url>%2F2019%2F12%2F28%2FFlutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、基础资源设置 + 下载1234567891011121314// 设置国内镜像vi ~/.zshrcexport PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cnsource .zshrc// 下载flutter sdkcd ~/Desktop/githubgit clone https://github.com/flutter/flutter.git// 设置flutter环境变量vi ~/.zshrcexport PATH="$PATH:~/desktop/github/flutter/bin"source .zshrc 二、基础环境 安装Xcode、IOS模拟器、Android Studio 执行flutter doctor命令，这里还是要挂VPN（要不就卡在build flutter tool…） 根据第2执行的结果有啥毛病按提示解决掉 三、编辑器设置（VSCode） 安装flutter扩展程序 设置flutter扩展程序的flutter sdk path cmd + shift + p: flutter: 创建新项目 启动IOS模拟器 按下F5]]></content>
      <tags>
        <tag>移动端APP</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每月总结（2019-12）]]></title>
    <url>%2F2019%2F12%2F28%2F%E6%AF%8F%E6%9C%88%E6%80%BB%E7%BB%93%EF%BC%882019-12%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言11月份离职，本来想休息个两个月，一边放松一边准备面试工作，但待了一个月感觉特备无聊。于是12月份开始认真投简历找工作了。这个月前半个月基本都在面试了，第一周每天面试两场，然而不是我觉得对方不合适就是对方觉得我不合适，当然每一份简历我都投的很认真的。 面试感悟大家都说今年工作更难找了，我觉得也就那样吧。主要是人太多了吧（各种培训机构，不像传统的学校，技术更新更具时效性），还有就是互联网也不像以前那样烧钱了，很多小公司都坚持不下去了，连大厂都开始裁员过冬了。总之就是狼多肉少了，经验丰富的老手也开始从大厂撤离跟小散抢肉吃了。面试下来，就感觉我这个水平，基本是处于一个大众水平，两年经验，其他优势完全不能在面试的时候显现出来，比如学习能力，专注性（因为太过容易专注于当前所做的事情，所以反而这个在面试时成了一个非常大的劣势）。 是时候选择了摆在我面前的有两个选择：一是去小厂当leader，二是去大厂外包。如果选择一的话，我肯定还会像以前一样去做同样的事情，基于现在的技术栈，去实现业务功能，其实就是躺在舒适区做重复的事情而已，还有考虑到未来稳定性，因为自己对未来一段时间的考虑还不是特别明确，所以也要选择相对不太稳定的工作（如果去小厂搞搞然后不搞跑路也太不负责了）。去外包的话，网上有很多负面评论，不过不去试试又怎能知道真实情况呢。还有就是这种基于外派的形式，多多少少可以了解到一些大厂的氛围、处事手段、新的架构模式等。还有就是看到比自己更厉害的人，就拥有了很强烈的要超越的心，可以一直督促自己。 两周经验前半月找工作，后半月投入工作。公司待了两周多，除了权限、装备差些，其他都还行。公司也是有一套固有前端架构，但架构的基础技术，都是我很熟悉的，很快就上手了。然后，平时做的事情也就是具体的某个业务模块，平时用到的一些工具虽然有些不一样，但和以前常用的工具也大都类似，如编辑器、代理工具等。 我做了哪些决定其实从去年开始，我就感觉自己遇到了技术瓶颈，不知道该如何去突破。所以经常会去尝试其他边缘技术，而不是再去深度挖掘前端核心技术。比如去玩PS、写个Unity3D、耍耍Three.js，然后再去研究股票，读些乱七八糟的书。最后觉得都很无聊的时候，再去看看《大话计算机》、《大话设计模式》等。 最近的核心放在了一些更加基础的工具上，比如git、vim、vscode等，不断熟练快捷键，接下来的核心会集中在NodeJS、React、CSS、JavaScript的深度解读上。除了广度到深度的转变之外，还有以下重要决定： 资讯收集 日常基础训练 固定周期总结 认知三部曲：背景（为什么）、如何解决（技术方案）、实现（产品）、扩展（二次封装） 这个月我学到了什么？ Terminal的一些常用快捷键 打造适合自己的VSCode 熟悉Vim 熟悉正则表达式 Leetcode刷题(数组 + 字符串) ES版本拾荒(ES6) 重新认识Babel React 15拾荒 markdown复习(因为要经常使用markdown写博客) 如何对webpack进行优化 React脚手架(yume-ywc)：目前看来，这个模板不是特别优秀，当是练习yeoman好了 后来才发现：只要不在意结果，那一切就都有了答案。]]></content>
      <tags>
        <tag>每月总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一周资讯总结（2019-12-23~2019-23-29）]]></title>
    <url>%2F2019%2F12%2F28%2F%E4%B8%80%E5%91%A8%E8%B5%84%E8%AE%AF%E6%80%BB%E7%BB%93%EF%BC%882019-12-23-2019-23-29%EF%BC%89%2F</url>
    <content type="text"><![CDATA[（来源）Twitter gistpad：https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs 关于Nodejs的一个微服务架构：https://github.com/parkroolucas/microservices-demo 又一个类React/Vue框架：https://svelte.dev/ 你不知道的强大的consoleAPI：https://dev.to/karkranikhil/javascript-developer-must-know-these-console-methods-57oa 纯JS实现的OCR库：https://github.com/naptha/tesseract.js Facebook大佬的博客：https://overreacted.io/ v8发布新版本：https://v8.dev/blog/v8-release-80 如何使用[]()!+六个字符输出self：https://javascript.christmas/2019/17 （来源）其他 web components：https://developer.mozilla.org/zh-CN/docs/Web/Web_Components]]></content>
      <tags>
        <tag>一周总结</tag>
        <tag>资讯总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GraphQL初探]]></title>
    <url>%2F2019%2F12%2F28%2FGraphQL%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[基础库 graphql express-graphql apollo-server-express]]></content>
      <tags>
        <tag>GraphQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Termial快捷键]]></title>
    <url>%2F2019%2F12%2F28%2FTermial%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[常用快捷键 ctrl + a/e：到头/尾 ctrl + u/k：剪切光标前/后 所有单词 ctrl + y：撤销上个操作 ctrl + w：删除光标前一个单词 ctrl + r: 搜索历史记录]]></content>
      <tags>
        <tag>快捷键</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于VSCode]]></title>
    <url>%2F2019%2F12%2F27%2F%E5%85%B3%E4%BA%8EVSCode%2F</url>
    <content type="text"><![CDATA[前言本人Webstorm党，特别依赖它集成的git工具，觉得特别好用。以前也因为团队用的是SourceTree + VSCode，有一段时间去尝试适应，但SourceTree真的太丑了，VSCode主题真的太丑了（到现在我都还没有找到一款很合我口味的亮色主题），就像Sublime Text一样。但WebStorm很吃内存，项目第一次加载时特别慢，不过这都不是问题，关键是要收费（怪不得做的这么好）。所以也一直想往VSCode方向转，这次换工作后也是一个契机吧，刚好git也要用原始的命令号来搞了（非要把逼格搞上去不可），VSCode做merge的时候两个窗口的比较也没以前那么差劲了。所以VSCode就好好学下吧。 常用配置 主题：FlatUI Immersed tab缩进设置：2|4 快捷键设置 ctrl + u：转换为小写 ctrl + shift + u：转换为大写 设置PanelDefault Location位置为right cmd + shift + p =&gt; shell（在path中安装code命令），可以在终端使用code命令打开编辑器 List: Open Mode设置双击点开文件夹 常用插件 Auto Close Tag Todo Tree FlatUI Reactjs code snippets vscode-icons settings sync（牛逼，写好一份配置） 自定义代码片段(cmd + shift + p =&gt; snippets) cl 1console.log($0); cld 123console.log(`----- start -----`);console.log($0);console.log(`----- end -----`); author 1234/*** author: iWuzhi* date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND*/ 常用快捷键 快捷键 功能 option + shfit + ↑/↓ 向上/下复制一行 option + ↑/↓ 向上/下移动 cmd + shift + p 全局命令面板 cmd + shift + n 新窗口 cmd + shift + w 关闭编辑器 cmd + w 关闭当前tab cmd + shift + k 删除当前行 cmd + enter 下一行插入 cmd + shift + enter 上一行插入 cmd + shift + | 花括号闭合处跳转 cmd + [] 调整缩进 cmd + shift + [] 窗口tab切换 options + shift + a 区块注释 ctrl + g 行跳转 cmd + k, cmd + s 快捷键绑定/查询 ctrl + ` 打开终端 cmd + shift + t 撤销最近关闭的一个tab 总结能想到一些就写一些吧，^_^]]></content>
      <tags>
        <tag>VSCode</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Vim]]></title>
    <url>%2F2019%2F12%2F27%2F%E5%85%B3%E4%BA%8EVim%2F</url>
    <content type="text"><![CDATA[什么是Vim？Vim是一个基于(命令行式)终端的文本编辑器，最大特点就是所有操作都是使用键盘操作而非鼠标，所以盛行于各种服务器，其背景也是因为服务器端缺乏优秀的文本编辑器。 两种模式Vim有两种模式： 插入模式(i)：这时和一个普通的文本编辑器基本没啥差别，你可以使用正常键位进行任意文本输入 正常模式(Esc)：这时更多的是充当一个文本阅览功能，你可以使用一些键位组合快速移动或删除替换一些文本 基本移动(光标)操作 h、j、k、l：（左、下、上、右）移动单个字符 w、e、b（下个单词开始处、单词结尾处、单词开始处）移动整个单词 数字 + 移动操作(h/j/k/l/w/e/b)：移动基本单元 * 数字，相当于移动多次了 0/$：移动到行首/尾 gg/G: 移动到文本开始/结束处 /：搜索（n：next，N：pre） 文本编辑（插入/替换/删除） o：在下一行插入（进入插入模式） x: 删除当前字符 r: 替换当前字符 d: 删除指定字符 d: 删除整行 $: 删除光标之后 0: 删除光标之前的 w: 下一个单词开始之前 e: 当前单词结尾 b: 当前单词开始 h/j/k/l: 光标到移动的位置 n[movement]: 移动n次的位置 a: 在当前行之后插入 D: 删除行剩余部分 S: 删除当前行并进入insert模式 yy: 复制当前行 p: 粘贴复制的文本常用链接 https://www.openvim.com/sandbox.html （一个非常棒的在线交互式练习网站）]]></content>
      <tags>
        <tag>编辑器</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于正则表达式]]></title>
    <url>%2F2019%2F12%2F25%2F%E5%85%B3%E4%BA%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[JavaScript中的正则表达式 RegExp.exex/test String.match/matchAll/replace/search/split 创建一个正则表达式1234// 字面量：脚本加载后编译，更好的性能const reg = /ab+c/;// 构造函数：运行时编译，动态构造表达式，更加灵活const reg = new RegExp('ab+c'); 正则表达式特殊字符含义字符类别 字符 含义 . 匹配任意单个字符，但是行结束符除外：\n \r \u2028 或 \u2029。 \d [0-9] \D [^0-9] \w [A-Za-z0-9_] \W [^A-Za-z0-9] \s 匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格 \S 匹配一个非空白符（注意和”.”的区别） \t 水平制表符Tab \r 回车符 \n 换行符 \v 垂直制表符 \f 换页符 [\b] 退格符 \0 NUL字符 \cX X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。 \xhh 匹配编码为 hh （两个十六进制数字）的字符。 \uhhh 匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。 \ 转义字符 字符集合 字符 含义 [xyz] 匹配集合中的任意一个字符。你可以使用连字符’-‘指定一个范围。 [^xyz] 任意不在括号内的字符 边界 字符 含 ^ 匹配输入开始。 $ 匹配输入结尾。 \b 匹配一个零宽单词边界，如一个字母与一个空格之间。 \B 匹配一个零宽非单词边界，如两个字母之间或两个空格之间 分组与反向引用 字符 含义 (x) 匹配 x 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。 \n n 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。 (?:x) 匹配 x 不会捕获匹配项。 数量词 字符 含义 x* 匹配前面的模式x0次或多次 x+ 匹配前面的模式x1次或多次 x*?x+? 像上面的 * 和 + 一样匹配前面的模式 x，然而匹配是最小可能匹配 x? 匹配前面的模式x0或1次 x|y 匹配x或y x{n} 前面的模式 x 连续出现 n 次时匹配 x{n,} 前面的模式 x 连续出现至少 n 次时匹配 x{n, m} 前面的模式 x 连续出现至少 n 次，至多 m 次时匹配 断言 字符 含义 x(?=y) 仅匹配被y跟随的x x(?!y) 仅匹配不被y跟随的x (?&lt;=y)x x只有在y后面才匹配 (?&lt;=!y)x x只有不在y后面才匹配 引用MDN: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classesRegexGolf: https://alf.nu/RegexGolf#accesstoken=YizTpRHBDopcV+NlVPe8common-regex: https://github.com/cdoco/common-regex 总结任重而道远，每周安排任务慢慢练习吧。]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12306自动购票程序（方案记录）]]></title>
    <url>%2F2019%2F12%2F22%2F12306%E8%87%AA%E5%8A%A8%E8%B4%AD%E7%A5%A8%E7%A8%8B%E5%BA%8F%EF%BC%88%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95%EF%BC%89%2F</url>
    <content type="text"><![CDATA[时间有点赶，先简单记下好了：]]></content>
      <tags>
        <tag>工具</tag>
        <tag>日常工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一周总结（2019.12.16-2019.12.22）]]></title>
    <url>%2F2019%2F12%2F22%2F%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-12-16-2019-12-22%EF%BC%89%2F</url>
    <content type="text"><![CDATA[因为换了新工作，所以这周的主线是适应新环境吧，当然每天副本还是要刷的。 因为是外包性质，所以关注的工作之外事情可能要比以往更多些，稍微有点烦。入职时除了大厂的流程比较长浪费了比较长的时间，其他都还好。这周对自己的表现，无论是环境适应、新的架构学习还是项目的认知程度，都是比较满意的，总体状态还是很不错。 虽然就一周时间，但对我个人的认知还是有很大的提升。 对外包（外派形式）这种模式有了一个更感性的认识，切切实实感受到了这种模式下对于一个雇员的弊端，以及对于金主的一些优势。还有就是雇主的这种经营模式，了解到雇主如何管理这些数量巨大的雇员，以及维系雇主和金主的项目风险问题。 因为周围都是大佬，虽然做的事情不一样，但从他们的做事风格，说话方式，处理一件事的流程，很容易看到自己的短板。还有就是他们每个人基本都会有一个方向是特别精通，这点我就感觉自己很差，因为以前都没想好方向，平时接触到的东西又太多了，难免分心，而且之前本来就是计划先拓宽自己的技能栈，然后再找到自己想做的事情根据需要去精通。虽然目前还没有一个特别优于别人的优势，但视野总算是没令自己失望。 “工欲善其事，必先利其器”，可能和我过去的经历有关吧，一度觉得很多工具，像git、vim这种需要命令行的操作可以借助一些可视化工具。当然刚开始学的时候肯定是在终端里去尝试，但平时可能会因为效率问题而使用可视化工具。但在我看到leader一连贯的命令行操作之后，整个人都懵逼了，然后这个思维基本就变过来了，不再纠结效率和逼格的问题了，对于一些常用的工具的命令号操作都会去认认真真的学，而不是简单的尝试。 还有就是我发现自己获取资讯的来源太少，最近还有用头条（种类太多，不太适合职业资讯）、掘金（有点大水漫灌的感觉现在，含金量不高了）之类的，以前什么都不用的，纯粹感觉自己是封闭了，也许是因为要学的东西比较多吧（Flutter、Three.js、PS…），光看官方的文档就已经够呛的了。今后会对资讯做进一步计划，对需要的资讯来源定期检查（目前考虑可能是一周整理一次）。 其他大部分工作时间还是和项目有关系，这里就不记录了。 然后这周的副本： LeetCode刷题 进度：初级算法-数组，每天一道题，快刷完了 成就：做题速度变快了，刷题兴致更高了，对于数组的一些奇葩操作也更熟悉了 ES版本解读：这块可能会中间穿插副本剧情，比如优先研究v8版本变化（有官方文档，更靠谱）或熟悉正则表达式，还得看时间再安排下。 总体这周过的还是非常有意义的，处理了很多事情，也想了很多，今后的发展方向、职业目标、个人期望以及生活方式也渐渐开始明朗起来。]]></content>
      <tags>
        <tag>一周总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript版本拾荒记——ES6]]></title>
    <url>%2F2019%2F12%2F15%2FJavaScript%E7%89%88%E6%9C%AC%E6%8B%BE%E8%8D%92%E8%AE%B0%E2%80%94%E2%80%94ES6%2F</url>
    <content type="text"><![CDATA[前言之前看东西都是杂七杂八的，主要在MDN上看，一般都只会读到最新版的文档，因为有babel这种神器，也不会太去考虑版本兼容的问题，最近发现自己在这方面真的是太弱势了，所以想总结下ES各个版本的变化及差异。查查资料，看看JS的发展史，瞬间就感觉自己是半道（2016年学艺）出家，有太多的空白需要填补。 目前考虑ES6主线以阮一峰大佬的ES 6入门为主：https://es6.ruanyifeng.com/ES5查漏补缺以网道为主：https://wangdoc.com/javascript/basic/ let和const （不存在）变量提升 暂时性死区（一定要先声明，后赋值） typeof不再100%安全（一定要先声明，后赋值） 不允许重复声明 块级作用域（ES5：全局作用域 + 函数作用域） const一旦声明变量，就必须立即初始化，不能留到以后赋值 const声明常量的局限性（仅针对变量指针的不变而非值，如数组等依旧可以改变）（考虑Object.freeze） 变量声明方式归纳：var、function、let、const、import、class 变量的解构赋值 不完全解构和解构不成功 数组解构依赖Iterator接口（按次序） 对象解构依赖属性（按属性名） 默认值，生效的条件是值必须严格等于undefined，如null是不会生效的 对象解构是找到同名属性再赋值，属性重命名（别名） 嵌套解构 解构赋值可以拿到原型链上的属性 使用圆括号解决已声明变量的解构赋值报错问题（一般不要这么做，代码丑陋而且容易出问题） 数组可以以下标的方式进行对象解构（这没有任何意义，因为我们可以直接使用下标对数组进行访问） 字符串会被当做数组进行解构 数值和布尔值会被当成其对应的包装对象进行解构 函数参数解构赋值，参数默认值和变量默认值常见用途 模块加载 Map遍历，for…of =&gt; [key, value]形式 函数参数默认值 交换变量的值（数组按顺序，对象按属性） 解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。 字符串的扩展 Unicode表示法 字符串遍历（注意和for循环的区别） 模板字符串 标签模板（函数调用） API更新： String.fromCodePoint() String.raw() s.codePointAt() s.normalize() s.includes(), startsWith(), endsWith() s.repeat() s.padStart()，padEnd() s.trimStart()，trimEnd() s.matchAll() 正则的扩展 构造函数行为 字符串API正则表达式 u修饰符 RegExp.prototype.unicode属性 y修饰符 RegExp.prototype.sticky RegExp.prototype.flags s 修饰符：dotAll 模式 后行断言 Unicode 属性类 具名组匹配 String.prototype.matchAll 数值的扩展 Number.isFinite() Number.isNaN() Number.parseInt() Number.parseFloat() Number.isInteger() Number.EPSILON Number.isSafeInteger() Math.trunc() Math.sign() Math.cbrt() Math.clz32() Math.imul() Math.fround() Math.hypot() Math.expm1() Math.log1p() Math.log10() Math.log2() Math.sinh() Math.cosh() Math.tanh() Math.asinh() Math.acosh() Math.atanh() 指数运算符：** BigInt数据类型 函数的扩展 函数参数默认值 rest参数 name属性 箭头函数 数组的扩展]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES版本</tag>
        <tag>ES 6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[资讯-Babel]]></title>
    <url>%2F2019%2F12%2F14%2F%E8%B5%84%E8%AE%AF-Babel%2F</url>
    <content type="text"><![CDATA[官方博客：https://babeljs.io/blog/Github：https://github.com/babel/babel官网：https://babeljs.io/stackoverflow：https://stackoverflow.com/questions/tagged/babeljstwitter：https://twitter.com/babeljs]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Babel</tag>
        <tag>JavaScript</tag>
        <tag>资讯</tag>
        <tag>前端资讯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Babel配置]]></title>
    <url>%2F2019%2F12%2F14%2FBabel%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、背景我们知道，Babel是基于插件的，但要使用哪些插件，这个是取决于我们自己的需求的，我们可以通过配置文件的形式明确指定Babel使用哪些插件进行转换工作。 二、如何使用官网提供了多种不同的配置方式： babel.config.js 动态创建配置 .babelrc 静态配置 package.json#babel 同.babelrc .babelrc.js（推荐：基本可以满足大多数场景） 基本和.babelrc相同，但可以使用JavaScript 可以使用任何Node.js API去做一些额外的事情，如使用执行环境变量做动态的配置 使用命令号工具 @babel/cli 使用babel API @babel/core 三、核心配置 presetspresets是Babel的一系列预设插件组合，常用的有@babel/preset-env、@babel/preset-react，这些present都发布到了npm上，你也可以创建自己的preset来个性化定制plugin组合。 pluginsbabel是一个编译器（源代码 =&gt; 目标代码），它运行时执行三个步骤：解析（源代码）、（按规则）转化、生成（新代码）。每一个步骤都是由plugin来完成的，所以说babel是基于plugin的（和webpack的思想有点像）。这是官网列举的plugins列表。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Babel</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重新认识Babel]]></title>
    <url>%2F2019%2F12%2F13%2F%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86Babel%2F</url>
    <content type="text"><![CDATA[一、背景ES标准每年都会更新，但是用户使用的浏览器或者其他目标环境（如node），并不会及时作出响应或更新，然而每个新版本的新特性对于每个开发者而言，都有不少的诱惑，因为新特性一般都是为了解决旧版本的一些特定问题或者提升开发者的开发效率而被加入标准的。鉴于这种开发环境和实际应用环境不匹配的情况，有些会使用Polyfill一些库，有些则需要Hack代码，Babel正是为帮你做这些事情而产生的。 二、 什么是Babel？ Babel是一个可以将ECMAScript 2015+ 代码转化为低版本浏览器能支持的ES版本的工具链，或者将一些非ES标准的JS超集（如TS）转换为目标环境可识别的ES代码。 主要做以下这些事： 语法转换 Polyfill目标环境没有的一些功能 代码转换 其他（如JS扩展、jsx、或自定义插件） 三、如何使用 使用cli 使用API Nodejs环境中可以使用@babel/register或babel-node：原理是在require hook，在require加载之前将先使用babel进行编译 四、Babel是如何做到的？ 五、扩展Babel是基于插件的，所以并不一定要将Babel定义在ES规范的局限之下（当然产出肯定是ES标准没错了），只要你愿意，可以使用任意奇葩的插件，甚至自定义插件，用来转换你自定义的奇奇怪怪的代码。总之就是，每个插件可以将你相应类型或有相应格式的文本转化输出为你期望得到的目标代码。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Babel</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React_v15-拾荒记]]></title>
    <url>%2F2019%2F12%2F12%2FReact15%E6%8B%BE%E8%8D%92%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[jsx jsx是React.createElement(component, props, …children)函数的一个语法糖，需要babel插件（preset-react）做转换。 需要注意的点： React必须在当前作用域 自定义组件必须首字母大写 可以使用点标记(如：MyComponent.HeaderComponent) Booleans、Null、和Undefined会被忽略(可以使用String(undefined/false/null)) 属性值默认为true setState()函数setState函数有时是异步执行的，处于对性能的考虑，React有时会将多个setState操作合并成一个更新操作。 当你调用setState函数时，React会将需要更新的state与原state进行合并(merge)，合并的过程是浅拷贝。 事件处理this指向问题，使用箭头函数或bind 为什么： js的class机制 list和keydiff算法 表单处理受控组件和非受控组件 条件渲染注意渲染的条件必须返回boolean值，如： harmony12345function Hello() &#123; return &lt;h3&gt;你好啊$&#123; 0 &amp;&amp; "我很好"&#125;&lt;/h3&gt;&#125;// 显示会将0也显示出来// 因为：Booleans, Null, and Undefined Are Ignored]]></content>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown]]></title>
    <url>%2F2019%2F12%2F11%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[背景（表象）markdown可以说是轻量级的HTML语言，标记也更加简洁。它的特点和优势也很明显：简单易用，使用格式标记进行快速文本排版，与其相比，一般富文本编辑器都显得过于笨重和复杂。 如何使用（功能应用）菜鸟教程 实现原理 （组成结构）不同的设备场景下实现的解析器可能会略有不同，如用浏览器显示的话，需要将markdown标签转换为HTML标签，如果在其他客户端使用的话，可能会将其转化为对应客户端UI显示的标记语言或代码。总的来说，markdown就是一个定义了标签(标记)和显示之间的一套规则或规范，而可以实现这套规则的代码就叫解析器。 功能扩展（二次封装）基于传统的markdown语法，可能已经无法满足部分人的需求，因此市面上又有不少的扩展，这里就列一个我喜欢的： mdeditor 个人常用工具 mdeditor ：Web PC端在线编辑器 typro：下载客户端编辑器]]></content>
      <tags>
        <tag>日常工具</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[论如何优化一个Webpack项目]]></title>
    <url>%2F2019%2F12%2F08%2F%E8%AE%BA%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%B8%80%E4%B8%AAWebpack%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[背景最近在写脚手架的模板(generator-ywc:react)，想把antd引进来，方便布局之类的。但是，发现打包后的main.bundle特别大，足足1M多。 分析于是使用webpack-bundle-analyzer分析了下，主要原因有： antd mockjs moment react 逐个解决首先Antd组件是使用babel-plugin-import方式按需加载的，其中主要是icon全量引入(&gt;500kb)。官网给出的方案是：使用resolve.alias（https://github.com/ant-design/ant-design/issues/12011#issuecomment-420038579 ）。 然后mockjs、moment引入都可以单独在entry设置，之后再利用splitChunks即可将这两个类库分离出来单独加载，而且大多时候都可以将其设置为异步加载。 接着react、react-dom也可以单独的entry形式设置，但要考虑到脚本的执行顺序，一定要将其放在前面，并同步加载。 最后webpack的配置文件entry看起来就像这样： 123456entry: &#123; lib: ["@babel/polyfill", "react", "react-dom"], moment: "moment", mockjs: "mockjs", app: path.join(process.cwd(), "src/index.jsx")&#125; 结果 延伸（如何使用Webpack优化一个项目） 在线演示http://106.13.230.115]]></content>
      <tags>
        <tag>React</tag>
        <tag>Webpack</tag>
        <tag>系统优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yume-ywc项目新增React脚手架]]></title>
    <url>%2F2019%2F12%2F03%2Fyume-ywc%E9%A1%B9%E7%9B%AE%E6%96%B0%E5%A2%9EReact%E8%84%9A%E6%89%8B%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[前言（废话）很久前就想写这个脚手架了，一直没有时间。最近比较空了，先把之前写一半的react脚手架第一个版本(0.1.0)搞完并发布。 背景和众多创建脚手架的目的一致： 快速创建一个初始化项目 集成众多依赖，或者更高层次的封装，让使用者觉得更加易用和简单 市面上的众多脚手架大多有一些毛病： 可配置性差(create-react-app) 版本更新较慢(dva)，无法使用较新版本的类库 如何解决将依赖配置不直接写入package.json，而是通过yeoman工具在使用者执行脚手架命令时动态写入package.json。整个模板的是从这两年的项目经验总结探索出来的，集成了redux、react-router、redux-saga、css module等功能。 框架基础结构 如何使用 安装 12npm install -g yonpm install -g generator-ywc 创建项目 123mkdir yourAPPDircd yourAPPDiryo ywc:react //ywc: Yume-web-cli:react 启动 1yarn start 看到控制台编译成功后，在浏览器打开http://localhost:3000 即可看到下面页面： 有用链接Github: https://github.com/iWuzhi/yume-ywc/tree/master/generators/reactIssues: https://github.com/iWuzhi/yume-ywc/issues]]></content>
      <tags>
        <tag>工具</tag>
        <tag>React</tag>
        <tag>脚手架</tag>
        <tag>yume-ywc</tag>
        <tag>yeoman</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js事件循环机制 ？]]></title>
    <url>%2F2019%2F11%2F23%2Fjs%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[MDN上对事件循环这一块也是说的比较模糊，随便百度一下，什么CSDN啊、简书啊、脚本之家啊、segmentfault啊、阮一峰啊乱七八糟的各种流弊哄哄的博客。大多都是给你写个例子跑跑，看看console的顺序，然后搬两张大佬的图过来，再做一番推测。。。看完之后多多少少了解了点吧。更重的要，我在其中挖到了一些比这些博客更有价值的链接。 Philip Roberts（没有计算机学位的小哥，和我一样呢，优秀）在JSConf关于event loop的演讲：https://www.youtube.com/watch?v=8aGhZQkoFbQ ，如果想要快速、简单的熟悉event loop，先去看这个视频，绝对没错。大佬在视频中对执行栈、异步队列，不同模块的异步事件如何有序的进行异步调用做了可视化的演示。 Jake的博客：https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/ ，这位大佬是更加倾向于从规范的角度去解释这个问题，当然文中也有一些可视化的演示。 接下来谈谈我个人的理解： 首先，事件循环不是ECMAScript的规范，而是HTML的规范，没错，是HTML的规范，这一点估计就有很多人是理解错误的！（事件循环规范：https://html.spec.whatwg.org/#event-loops ）也就是说，这是使用HTML规范的客户端（一般是浏览器）需要实现的功能。 下面是结合两位大佬画的一个小学生水平的图示：要真正的去了解的话，估计还是得把那个规范读个好几遍，现在就先这样吧。 理论就这样了，实践的话，私底下做做就可以了，主要还是写写常见的异步任务，定时器、promise啥的，然后根据所了解到的，先在脑子里跑一遍，再去浏览器验证，多搞几次估计就很熟练了。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>HTML规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redux原理]]></title>
    <url>%2F2019%2F11%2F14%2Fredux%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[redux核心概念和flux类似，除了一些简化外，我觉得最重要的是它的中间件。 每个中间件接受一个(包装过的)dispatch函数，并返回一个新的(包装过)dispatch函数，可以作为下一个中间件的参数，以达到将中间件串起来的目的。然后借助Array.reduce函数将中间件层层包裹，比如中间件函数为[f1, f2, f3]，执行reduce后为(f1(f2(f3())))。 redux中间件源码中最重要的感觉就一行代码：funcs.reduce((a, b) =&gt; (…args: any) =&gt; a(b(…args)))，不过真的很难理解，函数嵌套的太深了，不过也就做了函数嵌套一件事。 至于在react中使用的话，也就是提供一个外层的container做state与store的同步，在react-redux中，是用context的搞的，这样的话，可以不用props层层传递。 像redux-thunk这种的话，源码就一句，action(dispatch, getState, extraArgument)，我们正常情况下action是一个特定格式的对象，但如果是函数的话，就把它当做一个异步任务，redux-thunk就会处理，然后action是我们自己定义的函数，但会接收到dispatch, getState参数，我们可以在这个action里面很多事情，调接口、各种耗时任务，至于何时调用dispatch，由你自己决定，其实就是延迟调用dispatch而已。 当然我们完全可以不用redux-thunk，而是将异步流程从redux流程分离，在执行完异步任务后再直接发起dispatch，当然，这样可能要把代码写在View层了。 像redux-saga就比较复杂了，毕竟人家的目标是管理side effects，就像上面的一些异步任务，会涉及到先执行哪一个effect、同步执行、异步执行等等乱七八糟的东西，还没仔细看，等研究后单独记录下。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>flux</tag>
        <tag>redux</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flux源码日记]]></title>
    <url>%2F2019%2F11%2F12%2Fflux%E6%BA%90%E7%A0%81%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[官网：https://facebook.github.io/flux/， 官方示例代码用flow搞得，看得还是有点烦，但主体结构还算是认识，下图虚线框内上半部分就是flux的核心思想了，单向数据流，固定的更改状态方式，虚线框下半部分就是flux如何做到store和react的state同步，其实就是事件通知，最后还是依赖react的状态与页面同步。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>flux</tag>
        <tag>redux</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[this和对象原型]]></title>
    <url>%2F2019%2F10%2F27%2Fthis%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[第一章 关于this this误区： 误区一：指向函数自身 误区二：指向函数的作用域 到底this是什么this是在运行时绑定的，它的上下文取决于函数调用时的各种条件，this的绑定和函数的位置没有任何关系，只取决于函数的调用方式，当一个函数被调用时，会创建一个活动记录（执行上下文），这个记录会包含函数在哪里被调用、函数的调用方式、传入的参数等信息，this就是这个记录的一个属性，会在函数执行的过程中用到。 第二章 this全面解析函数的this是在调用时绑定的，完全取决于函数的调用位置 绑定规则 默认绑定：独立函数调用（绑定到全局对象或undefined，取决于是否是严格模式） 123456function foo() &#123; console.log(this.a);&#125;var a = 2;foo(); // 2 隐式绑定：函数调用位置是否有上下文对象 123456789function foo() &#123; console.log(this.a);&#125;var obj = &#123; a: 2, foo: foo,&#125;obj.foo(); // 2 隐式丢失：被隐式绑定的函数会丢失绑定对象，也就是说，它会应用默认绑定规则，如下示例，函数调用位置引用的是函数本身，即函数独立调用 12345678910111213141516171819202122232425function foo() &#123; console.log(this.a)&#125;var obj = &#123; a: 2, foo: foo&#125;var bar = obj.foo; // 函数别名var a = "oops, global"; // 全局对象属性bar(); // "oops, global"// 另一种常见的情况是传入回调函数时：function foo() &#123; console.log(this.a);&#125;function doFoo(fn) &#123; fn();&#125;var obj = &#123; a: 2, foo: foo,&#125;var a = "oops, global";doFoo(obj.foo); // 参数传递其实就是一种隐式赋值，所以结果和上面例子一致 显式绑定（call/apply、bind） 硬绑定 API调用的”上下文”：一些内置函数、三方库提供的额外参数，作用和bind类似 new 绑定和传统面向对象的语言不一样，javascript中new操作符的作用完全不一样： 创建一个全新的对象 这个新对象会被执行Prototype连接 这个心对象会绑定到函数调用的this 如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象 绑定规则优先级 new绑定：绑定到新创建的对象 显式绑定：绑定到指定对象 隐式绑定：绑定到引用上下文(对象) 默认绑定：严格模式下绑定到undefined，否则绑定到全局对象 被忽略的this在进行显示绑定时，某些情况你会将null/undefined作为绑定对象（apply展开数组，bind函数柯里化），这些值在调用时会被忽略，实际应用默认绑定。但这可能会带来一些副作用，比如某个函数确实使用了this，那就会对全局属性造成影响，后果无法预估。 另一种更安全的做法是，传入一个特殊的对象，把this绑定到这个对象不会对你的程序产生任何副作用，一个空的非委托对象，如下： 1234567891011function foo(a, b) &#123; console.log(a, b);&#125;var ø = Object.create(null);// 把数组展开foo.apply(ø, [2, 3]); // 2, 3// 使用bind进行函数柯里化var bar = foo.bind(ø, 2);bar(3); // 2, 3 箭头函数箭头函数不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定this，具体来说，箭头函数会继承外层函数调用的this绑定。 第三章 对象语法对象可以通过两种形式定义：声明形式和构造形式。 12345678// 对象的文字语法：var myObj = &#123; key: "value"&#125;// 构造形式：var myObj = new Object();myObj.key = "value"; 类型对象是JavaScript的基础，在JavaScript中一共有六种主要(简单基本)类型： string number boolean null undefined object 简单基本类型本身并不是对象，”JavaScript中万物皆是对象”这显然是错误的，null有时会被当做一种对象类型，即对null执行typeof null时会返回字符串”object”，这是语言本省的一个bug。备注：在JavaScript中，二进制前三位都为0的话会被判断为object类型，null的二进制表示是全0，所以执行typeof时会返回”object” 内置对象(函数) String Number Boolean Object Function Array Date RegExp Error 某些内置对象和基本类型很像，但它们并不一样，功能上倒是和一些面向对象语言的”装箱”类似，而且在必要时，string、number会自动转换成对象的内置对象。null和undefined没有对应的构造形式，Date只有构造形式，Object、Array、Function、RegExp无论使用文字形式还是构造形式，他们都是对象，不是字面量。Error很少在代码中显式创建，一般是在抛出异常时被自动创建，也可以使用new Error(…)这种构造形式来创建。 内容对象的内容是由一些存储在特定命名位置的任意类型的值组成的，我们称之为属性。 可计算属性名ES6增加了可计算属性名，可以在文字形式中使用[]包裹一个表达式来当做属性名： 12345678var prefix = "foo";var myObject = &#123; [prefix + "bar"]: "hello", [prefix + "baz"]: "world",&#125;myObject["foobar"]; // hellomyObject["foobaz"]; // world 数组数组有一套更加结构化的值存储机制。数组也是对象，所以虽然每个下标都是整数，你仍然可以给数组添加属性： 1234var myArray = ["foo", 42, "bar"];myArray.baz = "baz";myArray.length; // 3myArray.baz; // "baz" 无论添加了命名属性，数组的length值并不会发生改变。注意：如果你试图向数组添加一个属性，但是属性名”看起来”像一个数字，它会变成一个数值下标，因此会修改数组的内容，而不是添加一个属性： 1234var myArray = ["foo", 42, "bar"];myArray["3"] = "baz";myArray.length; // 4myArray[3]; // "baz" 复制对象JavaScript中没有内置的copy函数，因为我们无法选择一个默认的复制算法，但却可以通过一些其他手段做到这一点。 JSON序列化: 深度拷贝 Object.assign：浅度拷贝 属性描述符 Object.getOwnPropertyDescriptor(obj, prop)：获取属性描述符 Object.defineProperty(obj, prop, descriptor)：设置属性描述符12345678910111213141516var myObject = &#123; a: 2&#125;Object.getOwnPropertyDescriptor(myObject, "a");// &#123;// value: 2,// writable: true,// enumerable: true,// configurable: true,// &#125;Object.defineProperty(myObject, "a", &#123; value: 3, writable: false, configurable: false, enumerable: false,&#125;) 描述符属性的意义： writable：决定是否可以修改属性的值 configurable: 决定是否可以修改描述符，将configurable改成false是单向操作，无法撤销。例外是，可以将writable由true改为false，但无法由false改为true。configurable还会禁止删除这个属性，即delete语句会失败 enumerable：控制属性是否会出现在对象的枚举属性中，如是否出现在for…in循环中 value：定义该属性的值 get/set：定义属性访问时的特殊行为 （浅）不变性所有的方法创建的都是浅不变性，也就是说，他们只会影响目标对象和他的直接属性，如果目标对象引用了其他对象，其他对象的内容不受影响，仍然是可变的。 对象常量：使用writable + configurable可以创建一个真正的常量属性（不可修改、重定义或者删除） 禁止扩展：Object.preventExtensions(obj)禁止添加新的属性并且保留已有属性 密封：Object.seal()会创建一个”密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions()并把所有现有属性标记为configurable: false 冻结：Object.freeze()会创建一个”冻结对象”，这个方法实际上会在一个现有对象上调用Object.seal()，并把所有的”数据访问”属性标记为writable: false [[Get]]和[[Put]]JavaScript在属性访问时，实现了[[Get]]和[[Put]]操作，类似函数。ES5中可以使用getter和setter部分改写默认操作，但是只能应用在单个属性上，getter是一个隐藏函数，会在获取属性值时调用，setter也是一个隐藏函数，会在设置属性值时调用。 12345678910111213141516171819202122232425// 方法一：对象文字语法var myObj = &#123; get a() &#123; return this._a_; &#125;, set a(val) &#123; this._a_ = val * 2; &#125;&#125;myObj.a = 2;myObj.a; // 4// 方法二：属性描述符// 忽略value和writable特性，取而代之的是set和getvar myObject = &#123; a: 2,&#125;Object.defineProperty(myObject, "b", &#123; get: function() &#123; return this.a * 2; &#125;, enumerable: true,&#125;)myObject.a; // 2myObject.b; // 4 （属性）存在性 in操作符会检查属性是否在对象及其[[Prototype]]原型链中，hasOwnProperty只会检查属性是否在当前对象中，不会检查[[Prototype]]链，所有的普通对象都可以通过对于Object.prototype的委托来访问hasOwnProperty()，但有的对象没有链接到Object.prototype（通过Object.create(null)来创建的对象），这种情况下，调用hasOwnProperty()会失败，这时可以使用Object.prototype.hasOwnProperty.call(myObject, “a”)，借用该方法并把它显示绑定到myObject上。 for…in循环有时会产生出令人意料之外的结果，因为这种枚举不仅会包含所有的数值索引，还会包含所有的可枚举属性，最好只在对象上应用for…in循环。 propertyIsEnumerable()会检查给定的属性名是否直接存在于对象中（而不是原型链上）并且满足enumerable: true Object.keys()会返回一个数组，包含所有可枚举的属性 Object.getOwnPropertyNames()会返回一个数组，包含所有属性，无论它们是否可枚举（目前）并没有内置的方法可以获取in操作符使用的属性列表（对象本省的属性以及[[Prototype]]链中的所有属性） （值）遍历 数组：for循环，辅助迭代器（如forEach()、every()、some()） for…in：根据循环中的属性索引取值 for…of：要求本身有迭代器，数组内置了迭代器，你可以在自己的对象中定义迭代器，从而使用for…of语法12345678910111213141516171819202122var myObject = &#123; a: 2, b: 3,&#125;Object.defineProperty(myObject, Symbol.iterator, &#123; configurable: true, writable: false, enumerable: false, // 这个比较关键，使其不可枚举 value: function() &#123; var o = this; var idx = 0; var ks = Object.keys(o); return &#123; next: function() &#123; return &#123; value: o[ks[idx++]], done: (idx &gt; ks.length) &#125; &#125; &#125; &#125;&#125;) 第四章 混合对象”类”类理论面向对象编程强调的是数据和操作数据的行为本质上是互相关联的，类理论可以恰当的描述这种关系。类理论描述了一种代码的组织结构形式——一种在软件中对真实世界中问题领域的建模方法，类的一个核心概念是实例化、继承和多态（父类的通用行为可以被子类用更特殊的行为重写）。 类通过复制操作被实例化为对象形式。 类的机制 实例化：由一个特殊的类方法构造，方法名通常和类名相同，被称为构造函数，大多需要new来调用构造新的实例 继承：子类会包含父类行为的原始副本，但是也可以重写所有继承的行为甚至定义新行为，类的继承其实就是复制 多态：任何方法都可以引用继承层次中高层的方法，在继承链的不同层次中一个方法名可以被多次定义，当调用方法时会自动选择合适的定义，多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。 多重继承：大多数面向对象的语言不会有多重继承，因为使用多重继承的代价太高（从多个父类继承到多个同名方法时无从选择） 混入JavaScript中的类和其他语言的并不一样。简单来说，JavaScript中只有对象，并不存在可以被实例化的”类”，一个对象不会被复制到其他对象，它们会被关联起来。 显式混入：其实就是简单的将一个对象的属性复制到另一个对象，当然不能完全复制，如对象引用。复制的目的是模仿类模式。(this显式绑定规则) 隐身混入：借助this的隐式绑定规则，动态的为对象生成一样的属性123456789101112131415161718192021222324252627282930313233343536373839404142434445// 显式混入function mixin(sourceObj, targetObj) &#123; for (var key in sourceObj) &#123; if (!(key in targetObj)) &#123; targetObj[key] = sourceObj[key]; // 并不会完全复制，有可能是对象引用 &#125; &#125; return targetObj;&#125;var Vehicle = &#123; engines: 1, ignition: function() &#123; console.log("Turning on my engine,"); &#125;, drive: function() &#123; this.ignition(); console.log("Steering and moving forward"); &#125;&#125;var Car = mixin(Vehicle, &#123; wheels: 4, drive: function() &#123; Vehicle.drive.call(this); // 借用Vehicle.drive方法 console.log("Rolling on all " + this.wheels + " wheels"); &#125;&#125;)// 隐式混入var Something = &#123; cool: function() &#123; this.greeting = "Hello World"; this.count = this.count ? this.count + 1 : 1; &#125;&#125;Something.cool();Something.greeting; // Hello WorldSomething.count; // 1var Another = &#123; cool: function() &#123; Something.cool.call(this); &#125;&#125;Another.cool();Another.greeting; // Hello WorldAnother.count; // 1]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>读书笔记</tag>
        <tag>《你不知道的JavaScript》</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[create-react-app]]></title>
    <url>%2F2019%2F10%2F24%2Fcreate-react-app%2F</url>
    <content type="text"><![CDATA[这个的是React官网推荐的一个脚手架，文档地址：https://create-react-app.dev/。足够简单，你根本都不用了解webpack、babel是个啥，非常适合初学者，但也有一个很大的弊端，就是可配置性。 这个脚手架本身的使用方式非常简单，看官网文档就行了，下面主要说说如何进行个性化配置： 首先，你需要用到eject命令将封装在react-scripts里的配置文件、相关依赖弹射出来，它会将内置的配置全部以文件的形式重新存放于你的项目中，你可能比较在意的就是webpack的配置和Babel的配置。配置的时候只需要改变config/webpack.config.js相应的属性即可，这样基本上和裸了一个webpack没啥区别，不过是帮你把一些需要的loader，plugin配置好，其中有些配置在你的项目中甚至根本用不到。 至此，可配置性问题也算是勉强解决了，可eject出来的配置真的是有点复杂，至少看起来非常复杂，它是根据不同的环境，启动不同的脚本(scripts)，然后设置不同的执行环境变量，动态设置不同的webpack配置，不像固定的webpack文件那样简洁明了。 总结一下就是，官网推荐简单易上手，可配置性基本为0，但也有勉强能用的解决方案(eject)。 反正我个人是非常不喜欢create-react-app的，社区也提供了其他类似脚手架：如rodhog。 这里有篇文章还不错：https://github.com/sorrycc/blog/issues/15不过rodhog这个项目好像好久没更新了。 近期也有尝试过umi，umi的设计思想像是模仿next.js，整体用下来感觉还是很不错的，足够简单，就是有一套自己的开发模式(框架固有模式)，可能稍微需要你去适应一下。 yeoman社区 (https://yeoman.io) 也有提供一些个人开发者提供的不错的脚手架，有空可以去探索一下，说不定突然就灵感大发，写一个御用的脚手架。 官网还提到两个工具neutrinojs和nwb，看着牛逼哄哄的，还没仔细看。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html入门指南]]></title>
    <url>%2F2019%2F10%2F23%2Fhtml%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[第一次开始接触的时候，你可能会复制(从书上、网上、看视频手打)下面一段代码片段： 123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Document Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; Hello World !&lt;/body&gt;&lt;/html&gt; 你用记事本、Sublime text、WebStorm等你习惯的编辑器，然后保存为.html格式的文件，接着你双击这个文件，你的默认浏览器自动打开(或者将文件拖拽到你喜欢的浏览器)，你看到了空白的浏览器中显示着“Hello World !”，你还看到了浏览器Tab的标题显示着“Document Title”。 你欣赏着自己的作品，心里默念一句：卧槽，HTML真简单，劳资5min就学会了。 简单使你的学习欲望顿时上升了一大截，在接下来的学习中，你又了解到各种新的词汇：比如标签、文档、w3c、块元素、内联元素等。渐渐地你对HTML的结构开始熟悉起来了，知道HTML有固定的格式，这是因为规范如此。备注：既然是规范，想必是为了众多浏览器能够统一实现API，规定HTML结构，浏览器只要按规范实现即可，也降低了开发者的学习成本，不用为每种不同的浏览器学习不同的语法，使用不同的代码编写同样的效果。谁来制定呢，当然是w3c了，后来w3c决定制定一个最终版HTML规范，就是以后再也不改了， 但是浏览器厂商却不同意，觉得HTML还是要更加灵活，于是就有了分歧，几个浏览器厂商联合起来又搞了个组织whatwg，目前w3c的规范也是趋向于whatwg。 在逐渐深入的过程种你发现，学习HTML无非就是学习标签而已，只要记住了常用的标签，出门就能说自己精通HTML。 备注：推荐一个网站: MDN，MDN将HTML分为了四大模块进行介绍，基础、多媒体与嵌入、表格、表单，每个模块里又有更细的划分与详尽的介绍。 你挑选了一些常用的标签：div、h1~h5、a、form、label、button、input、textarea、select + option、span、ol/ul + li、table、img。这些标签你每个都手敲了一遍，或者根据网上的例子，看看在浏览器中的真实展示效果。 至此，你的标签储备足够你日常使用了。学习了别人的规范，接下来就得规范自己了，什么代码风格、语义化啊。 HTML真的是太简单了，就算是你平时一直在用，也不会出现什么特别的问题值得你去积累，去研究。 对于HTML的学习，个人觉得真额是考验单词储备量，平时真正用到的也就那几个。 一些常用的链接： 一个很完整的Table例子：https://roy-tian.github.io/mdn-examples/html/planets-data/ 原生表单控件：https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/The_native_form_widgets 块级元素：https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements 行内元素：https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elements w3c组织：https://www.w3.org/TR/html52/ whatwg组织：https://html.spec.whatwg.org/ 下面是我创建项目时经常用到的一个模板： 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;!--指定文档编码方式，一般都是UTF-8--&gt; &lt;meta charset="UTF-8" /&gt; &lt;!--作者--&gt; &lt;meta name="author" content="iWuzhi" /&gt; &lt;!--描述--&gt; &lt;meta name="description" content="" /&gt; &lt;!--关键词 作弊者会充斥大量的关键词扰乱搜索引擎，所以这个不再怎么使用了--&gt; &lt;meta name="Keywords" content="" /&gt; &lt;!--指定文档的兼容模式--&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;!--让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放--&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" /&gt; &lt;!--阻止移动设备自动识别某些额外的功能，如拨打电话功能，主要针对Safari--&gt; &lt;meta name="format-detection" content="telephone=no,email=no,address=no" /&gt; &lt;!--防止页面被缓存--&gt; &lt;meta http-equiv="pragma" content="no-cache"&gt; &lt;meta http-equiv="cache-control" content="no-cache"&gt; &lt;meta http-equiv="expires" content="0"&gt; &lt;!--站点图标--&gt; &lt;link rel="shortcut icon" href="favicon.ico" type="image/x-icon" /&gt; &lt;!--标题--&gt; &lt;title&gt;通用html模板&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="root"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技术总结（2017-8~2019-10）]]></title>
    <url>%2F2019%2F10%2F22%2F%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93%EF%BC%882017-8-2019-10%EF%BC%89%2F</url>
    <content type="text"><![CDATA[这两年主线Web，然后周边杂七杂八的副本也刷了不少，这里把用过的所有东西都列出来，方便之后整理吧。 核心基础技术 html css javascript 核心基础技术扩展 css技术扩展：less, sass/scss, postcss, style-components, css-module javascript扩展：TypeScript React全套 react react-dom react-router react-router-dom react-loadable 包管理器 npm(cnpm, npx) yarn 构建工具 Webpack Parcel Rollup 状态管理 redux：redux-saga，redux-thunk mobx 类型检查 PropTypes Flow API规范 REST GraphQL 常用工具 lodash moment classnames numerial RxJS Ramda 测试框架（接触的有点少，真得找个机会好好体会一下了） Mocha Jest Chai 静态文档生成 docz: 基于Gatsby Gatsby storybook 桌面开发 Electron husky代码美化，格式化react-styleguidistsource-map-explorergraphqldotenvdotenv-expandsemver http协议计算机网络]]></content>
      <tags>
        <tag>技术总结 前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《CSS世界》读书笔记]]></title>
    <url>%2F2019%2F09%2F18%2F%E3%80%8ACSS%E4%B8%96%E7%95%8C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8B%2F</url>
    <content type="text"><![CDATA[第一章 概述本书中CSS世界特指CSS2.1。 这个世界的事情只要发生了，都是有原因的，CSS世界的出现也不例外。要想深入理解CSS属性的一些设计原因、表现原理，离不开当时的历史环境，CSS世界的诞生就是为图文信息展示服务的。 作者认为，（文档）”流”是影响整个CSS世界的一个重要因素，”流”是一种基本的定位和布局机制，可以形象描述成CSS世界中引导元素排列和定位的一条看不见的”水流”，当然”流”可以被破坏（特殊布局），流向亦可以改变。 第二章 需提前了解的术语和概念 属性：CSS世界内置的固有属性，每个属性都有不同的作用，用来定制我们自己的页面 值：一般包括以下类型（与属性值关系密切） 数值(z-index: 2) 百分比(height: 30%) 颜色值(red, #000) 关键字：CSS内置的一些固定值(transparent、solid、red等) 变量（本书不做介绍） 长度单位： 时间单位：s, ms 角度单位：deg, rad 长度单位: px, em 其他：vh、vw等 功能符（css函数）： rgba hsla calc url等 属性值：值 + 关键字 + 功能符 声明：属性名 + 属性值 声明块：花括号（{}）包裹的一系列声明 规则或规则集：选择器 + 声明块 选择器：瞄准目标元素的东西 关系选择器：根据元素之间的关系选择元素的选择器 @规则：以@字符开始的一些规则，像@media、@font-face、@page、@support 123body &#123; color: red; /* color是属性，red是值, red也是关键字(代表红颜色) */&#125; CSS世界中的”未定义行为”web标准未定义的行为表现，（甚至标准已定义的表现）各大浏览器厂商表现并不一致，默认样式不一致等。 第三章 流、元素与基本尺寸width和height作用于content-box（当然可以凭借box-sizing更改），width: auto作用于不用类型的盒子（模型）上，会有不同的效果：充分利用可用空间(div)、收缩与包裹(span)、收缩到最小(table)、超出容器限制(white-space: nowrap) 书中特技： 在绝对定位模型中，默认情况元素的宽度表现是”包裹性”，宽度由内部尺寸决定，但是，当left/right或top/bottom对立方位的属性值同事存在的时候，元素的宽度表现为”格式化”宽度，如下可以间接设置宽度和高度（高度自适应100%） 一行文字居中，多行文字居左，其实就是用两个容器来控制，外面控制居中，里面控制居左，如下： 123&lt;span class="out"&gt; &lt;span class="inner"&gt;一些文字&lt;/span&gt;&lt;/span&gt; 123456.out &#123; text-align: center; /* 我能一行居中 */&#125;.inner &#123; text-align: left; /* 我能多行居左 */&#125; 具体实例：https://demo.cssworld.cn/3/2-5.php 首选最小宽度（指元素最适合的最小宽度） 容器将宽度设置为0，子元素的宽度并不为0，但会影响到布局，从布局的角度来看，子元素也的确是不见了(不占位置)。 书中奇技淫巧： 利用中英(连续英文单词不换行)文的最小宽度不同，可以构造类似凹凸的图形。具体示例：https://demo.cssworld.cn/3/2-6.php height: 100%：必须给与父元素固定高度或使用绝对定位。 实现子元素等高：子元素自动撑开父元素，父元素position设置为relative，其他子元素再设置position: absolute, height： 100%，可实现这些绝对定位的子元素与撑开父元素的子元素等高。如下：具体示例：https://demo.cssworld.cn/3/2-12.php 12345678910111213141516171819.box &#123; display: inline-block; position: relative;&#125;.prev, .next &#123; width: 50%; height: 100%; position: absolute; top: 0; opacity: .5;&#125;.prev &#123; left: 0; background-color: #cd0000;&#125;.next &#123; right: 0; background-color: #34538b;&#125; 利用max-height做任意高度元素的展开收起动画 幽灵空白节点： 1234567/* &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt; */div &#123; background-color: red; /* 这个DIV本来高度应该是0，但实际不是，可自测，和font-size，line-height相关 */&#125;span &#123; display: inline-block;&#125; 第四章 盒尺寸四大家族盒尺寸中的4个盒子，content、padding、border、marginß 4.1 content与替换元素 替换元素使用content可以替换原有替换属性的值，具体示例：https://demo.cssworld.cn/4/1-4.php 普通元素也可添加content属性，值若设置为url()，那元素就会被替换，表现和img标签类似，具体示例：https://demo.cssworld.cn/4/1-5.php content替换的只是视觉替换，比如替换图片后，无法保存content属性的图片 书中奇技淫巧： 利用::before和::after实现两端对齐，具体示例：https://demo.cssworld.cn/4/1-7.php 配合@font-face规则实现图标字体效果，具体示例：https://demo.cssworld.cn/4/1-8.php 利用\A的换行特性，实现打点加载功能，具体示例：https://demo.cssworld.cn/4/1-9.php content图片生成，具体示例：https://demo.cssworld.cn/4/1-10.php content开启闭合符号生成，还可生成固定表单前缀，示例如下： 1234567891011/* 生成固定闭合符号：书名号 */q::before &#123; content: "《";&#125;q::after &#123; content: "》";&#125;/* 固定表单前缀，或其他类似功能 */.form-item::before &#123; content: "请输入：";&#125; content attr函数属性值内容生成 content计数器，counter-reset、counter-increment、counter()/counters()，可以像ul/ol一样制造序号，利用content的特性，结合content其他技术，可以更加灵活使用，具体示例：https://demo.cssworld.cn/4/1-11.php ~ https://demo.cssworld.cn/4/1-19.php 4.2 温和的padding属性（温和是指很少出现意外的情况） padding会影响元素的尺寸，会影响布局 padding的百分比计算始终是相对于（父元素）宽度的 各个浏览器下不同元素的默认paading值一般都不一样（即兼容问题，通常可引入一些初始化CSS文件，如normalize.css）书中奇技淫巧： 实现类菜单icon（我觉得关键还是background-clip: content-box;三条线分别是上border、中content、下border，然后利用background-clip将padding的背景色隐藏掉），具体示例：https://demo.cssworld.cn/4/2-4.php 实现双圆点效果（这个原理和2差不多，就是加了border的一些特性），具体示例：https://demo.cssworld.cn/4/2-4.php 4.3 激进的margin属性 padding控制元素内边距，margin控制元素外边距 元素尺寸： margin尺寸：无对应DOM API border尺寸：offsetWidth/offsetHeight padding尺寸：clientWidth/clientHeight content尺寸：(style.width) 某些情况下，margin会影响到元素尺寸，具体示例：https://demo.cssworld.cn/4/3-1.php 底部留白（有滚动条）不能用padding-bottom，有兼容问题（Firefox），使用margin的话留白部分没有滚动条，可多加个元素专门用作留白处理 利用margin的负值可以扩大子元素相对于父元素的限制（非常使用于：整体左右padding固定，但是中间部分突出的布局） margin合并：块级元素的上下外边距有时会合并为单个外边距（合并的意义：如下图，考虑到h1标签的上下边距，若没有margin合并，则两个h1中间部分会是现在的2倍，这样想来，margin合并还是有点道理的）1234567891011&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;hello&lt;/h1&gt; &lt;h1&gt;world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 书中特技： 实现等高布局：具体示例：https://demo.cssworld.cn/4/3-2.php，等高布局可百度搜索关键字：等高布局，我觉得比较靠谱的还是flex和table 利用margin实现左右上下对齐，具体示例：https://demo.cssworld.cn/4/3-5.php 4.4 功勋卓越的border属性]]></content>
      <tags>
        <tag>前端</tag>
        <tag>读书笔记</tag>
        <tag>CSS</tag>
        <tag>《CSS世界》</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一部分 作用域和闭包]]></title>
    <url>%2F2019%2F09%2F05%2F%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[概述书中总结道，作用域是一套设计良好的，用来存储或访问变量的规则。对于JS来说，这套规则主要主要有以下几点： 作用域嵌套（自下向上，逐级包含） 函数作用域（可以理解为形成局部作用域的规则） 块作用域（可以理解为形成局部作用域的规则） 变量名（/函数名）提升 最后，书中提到由作用域规则而构造的闭包。 第一章 作用域是什么这章扯到了编译原理，提到一般编译的三个步骤：词法分析、语法分析、代码生成。然后通过模拟对话的方式，简单阐述了引擎、编译器、作用域之间的关系。不过我个人觉得没啥卵用，无论是词法分析、语法分析或是代码生成，这些过程都是黑盒子，说破天在这本书里还是黑盒子。 然后介绍了作用域嵌套，感觉这是一般编程语言都会有的作用域规则。 第二章 词法作用域这里提到两种作用域的工作模型：词法作用域和动态作用域。大多数语言都使用的是词法作用域，JavaScript也是。 词法作用域就是定义在词法阶段的作用域，即由你在写代码时将变量和块作用域写在哪里决定（平时可能感觉不到，但仔细一想的话，机器肯定是没有作用域的概念，是语言本身赋予的一种能力，或规则吧）。 文中还提到了一些欺骗词法的手段，比如eval、with等。eval的功能是真的很强大，可以将字符串生成为js代码，with更像是处理对象属性的语法糖。这两个函数都不推荐使用。 第三章 函数作用域和块作用域函数可以隐藏内部实现，同事函数可以形成一个局部的作用域，从而规避冲突。 这章还提到函数表达式，如下： 123456var a = 2;(function foo() &#123; var a = 3; console.log(3); // 3&#125;)();console.log(a); // 2 函数表达式可以防止函数声明本身造成的命名污染。 文中接着介绍了匿名和具名函数，如下： 12345678setTimeout(function() &#123; console.log("我是匿名函数...");&#125;)// 推荐这种写法setTimeout(function Hello() &#123; console.log("我的名字是Hello...");&#125;) 书中推荐给函数表达式指定一个函数名，可以增强可读性。 接着书中详细介绍了立即执行函数表达式，如下： 123456789// 写法一：(function IIFE( global ) &#123; // ...&#125;)(window);// 写法二：(function IIFE( global ) &#123; // ... &#125;(window)); 参数还可以是函数或其他，可以根据需要更加灵活的使用。 接着书中介绍了块作用域，其实函数也是块作用域的一种。JavaScript可以形成块作用的语法主要有以下几种： 函数 for循环 if语句 try/catch语句 接着指出var声明的缺陷，从而（ES6）引出let、和const关键词。 第四章 （变量声明）提升每级作用域都会进行提升操作，函数声明会被提升，但是函数表达式却不会被提升（即使是具名的函数表达式） 1234567891011121314151617181920212223foo();function foo() &#123; console.log(a); // undefined var a = 2;&#125;// 等同于function foo() &#123; var a; console.log(a); // undefined a = 2;&#125;foo(); // TypeError =&gt; undefined()var foo = function bar() &#123; // ...&#125;// 等同于var foo;foo();foo = function() &#123; // var bar = ...self...&#125; 函数声明和变量声明都会被提升，但是函数会首先被提升，尽管重复的var声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的 12345678910111213141516foo(); // 1var foo;function foo() &#123; console.log(1);&#125;foo = function() &#123; console.log(2);&#125;// 等同于function foo() &#123; console.log(1);&#125;foo();foo = function() &#123; console.log(2);&#125; 总结一下就是，变量（包括函数声明）的声明和赋值是两个操作，声明会首先被提升到本级作用域。 第五章 作用域闭包书中解释：当函数可以记住并且访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。MDN（https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures ）的解释：函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。 关键就是函数，以及函数所持有的局部作用域的引用。闭包可以说是js早期模块化不可缺少的核心。书中提到的几个和闭包相关的关键点： 回调函数和闭包：只要使用了回调函数，实际上就是在使用闭包 块作用域和闭包：循环/if 模块机制]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>读书笔记</tag>
        <tag>《你不知道的JavaScript》</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[股票计算器]]></title>
    <url>%2F2019%2F09%2F02%2F%E8%82%A1%E7%A5%A8%E8%AE%A1%E7%AE%97%E5%99%A8%2F</url>
    <content type="text"><![CDATA[起因正真加入炒股大军韭菜行列已经半年多了，其中赚了不少钱，也亏了不少钱，总的还是亏的。玩到现在也算是涨了点知识，也积累了点经验吧，至少不会每天一开盘就盯着股价不放，生怕错过了盘中大起大落，令人热血高涨的最高价，亦或令人挫骨扬灰的最低价，作为韭菜中的股神，生怕错过自己成为利弗莫尔的传奇一刻。 韭菜如何成长，就是从你不断亏钱的那一刻起。有了伤疤，人才会反思，从低谷爬向巅峰，再从巅峰跌落。 如今我更喜欢挂单，而不是盯盘。相比盯盘，挂单的方式是把炒股当做副业或者生活的小游戏，而不是你当前工作或生活的重心。挂单肯定是要分价挂单，所以要计算跌几个点加仓啊、涨几个点减仓啊啥的，所以就需要个计算股价的计算器（很遗憾，我用的东方财富APP没有这种功能）。 刚开始想做这个功能的时候，立刻就想到了Chrome扩展程序（之前写过Hello Word），感觉从功能上来讲非常适合，而且我的工作需要每天浏览器经常开着，用起来也很方便。于是便着手准备，但是chrome的限制还真是多，加载个js啥的都还得配置一下，有点麻烦，就产生一丝放弃的念头。刚好中午吃饭的时候，想到了需要手机查看这个计算器功能，手机上chrome貌似没这扩展程序功能。于是果断放弃了Chrome扩展程序的做法，决定使用Hexo建立的博客来搞。 Hexo探索首先肯定是要像关于、标签、分类一样，建一个单独的page，入口也可以刚好放在导航栏里。 执行命令 1hexo new page calculator 这条命令会帮你生成source/calculator/index.md，修改index.md，添加type配置，type会在page.swig有用到 12345---title: 股价计算器date: 2019-09-02 15:07:07type: calculator--- 然后配置next#_config.yml 123menu: ... calculator: /calculator/ || calculator(calculator) next的Icon可以参考 https://fontawesome.com 接着需要配置中文，打开next#languages#zh-CN.yml 123menu: ... calculator: 股价计算器 然后再next#layout下添加calculator.swig文件，修改page.swig文件，根据page.type将calculator.swig引入。 接着就可以写我的计算器了，随便写一行Hello World就有效果了。 但是还有两个问题，什么是.swig文件？还有怎么写样式啊？ .swig之谜稍微查了一下，swig是一个ndoe.js模板，其实性质和ejs、jsp之类的差不多了。所以也不用管太多，就把它当做HTML好了，而且我这个计算器的功能基本也不会用到它的API，因为这里我只需要原生的js就行了。 直接在calculator.swig添加我需要的Input标签、button标签等，然后直接加个script标签在里面写js就行了。 但是css总不能全都写成内联模式，毕竟这模板也只是完整页面的一部分，想了想，参照标签、归档这些菜单的做法，在next#source#css#_common#components#pages下添加calculator.styl，并在pages.styl中导入即可。然后就跟平常写html没啥两样了，除了styl格式有点诡异，但和普通css也没差。 股票计算器真正写计算机的逻辑时，啪啪啪，几下就敲完了。 就在左边菜单栏，可以试试。]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Hexo</tag>
        <tag>股票</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时光荏苒，当以笔代替消逝的记忆]]></title>
    <url>%2F2019%2F09%2F01%2F%E6%97%B6%E5%85%89%E8%8D%8F%E8%8B%92%EF%BC%8C%E5%BD%93%E4%BB%A5%E7%AC%94%E4%BB%A3%E6%9B%BF%E6%B6%88%E9%80%9D%E7%9A%84%E8%AE%B0%E5%BF%86%2F</url>
    <content type="text"><![CDATA[偶然回头，才发现背后已然是一片空白。 也曾有过几次想要写点东西，切切实实的记录下来，而不是靠那逐渐消亡的脑细胞，但最终都以各种理由中断，比如工作太忙、现在学到的东西过于浅薄，无法掏出正真有价值的知识、甚至天真的想靠自己天才般的头脑把所有的知识都真正占为己有。无论短期记忆、长期记忆，最终都经不住时间的摧残，最后留给你的，只有习惯和空白。 上大学的时候，在博客园坚持过好长一段时间，每天都写博客(我的博客)，那时也是刚好刚开始接触编程的一些知识吧，兴致很高，而且也有足够的时间。从纸上谈兵到真正实战，真的是一大步，实习那会真的是一直忙着写Bug，也就不再写博客了。 这次决定开始从头积累，也有想过用博客园，或者掘金（CSDN、新浪什么的就不用考虑了，全是广告），不过就是颜值不过关，也想直接自己做个博客网站，但想想有归档、标签、搜索等，感觉功能还蛮复杂的，关键是没有设计自己做出来的东西总感觉会不满意，然后一直改，一直改，最后就疯了。还有就是之前见过Hexo NexT这个主题，真的是一见钟情，非常简洁。 这个博客从创建到配置到自己满意，大概花了半天的时间吧。Hexo真的很强大，不折腾的话，估计半个小时就搞好了吧。搁在以前，肯定是要自己搞一套主题，或者模仿Hexo搭个类似的框架，然后再半途而废，因为自己搞的主题是在是太丑了，而且自己的想法随时可能会变，改来改去就烦了。现在这种什么都想自己搞一套的想法转瞬即逝，以前是要自己代码敲得爽，现在是要程序用的爽。 发现自己真的变了很多，以前写这种Hello World的时候，一定要先定个小目标：比如每天写个10篇博客。现在觉得真的没必要强迫自己每天去写博客了，我只想把自己不想忘记的东西记录在这里。 9月，有个好的开始吧。]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
